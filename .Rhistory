library(lubridate)
casos_rmr$data = ymd(casos_rmr$data, tz = "America/Sao_Paulo")
casos_rmr$casos = as.numeric(casos_rmr$casos)
class(casos_rmr$data)
casos_rmr$data = as.Date(casos_rmr$data)
library(pracma)
# Adicionando as médias móveis
casos_rmr <- casos_rmr %>%
mutate(media_movel = movavg(casos_rmr$casos, 7, "s"))
# Gráfico RMR
library(hrbrthemes)
casos_rmr_plot <- ggplot(data = casos_rmr, aes(x = data)) +
geom_bar(aes(y = casos, color = "Casos por dia"),
fill = "blue",
stat="identity", alpha = 0.5)+
geom_line(aes(y = media_movel, color = "Média móvel (7 dias)"), size = 2)+
scale_color_manual(values = c("blue", "red")) +
theme_ipsum() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45),
legend.title = element_blank()) +
labs(title = "Casos de COVID-19 RMR",
subtitle = "",
caption = paste("IRRD/PE. Fonte: SES-PE.\n Dados atualizados em ",
format(as.Date(hoje), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()))) +
xlab("") +
ylab("Casos diários")
casos_rmr_plot
# Salvando o html
library(plotly)
casos_rmr_plot2 <- ggplotly(casos_rmr_plot, width = 3, height = 6)
casos_rmr_plot2
htmlwidgets::saveWidget(casos_rmr_plot2,
paste(path, "casos_rmr_plot.html"))
# Para o interior
# Preparação para os gráficos
casos_interior <- as.data.frame(table(covid_interior$data_da_notificacao))
names(casos_interior) <- c("data", "casos")
# Alterando as classes
casos_interior$data = as.character.factor(casos_interior$data)
class(casos_interior$data)
library(lubridate)
casos_interior$data = ymd(casos_interior$data)
casos_interior$casos = as.numeric(casos_interior$casos)
library(pracma)
# Adicionando as médias móveis
casos_interior <- casos_interior %>%
mutate(media_movel = movavg(casos_interior$casos, 7, "s"))
# Gráfico RMR
library(hrbrthemes)
casos_interior_plot <- ggplot(data = casos_interior, aes(x = data)) +
geom_bar(aes(y = casos, color = "Casos por dia"),
fill = "darkgreen",
stat= "identity", alpha = 0.5)+
geom_line(aes(y = media_movel, color = "Média móvel (7 dias)"), size = 2)+
scale_color_manual(values = c("darkgreen", "blue")) +
theme_ipsum() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45),
legend.title = element_blank()) +
labs(title = "Casos de COVID-19 no interior de PE",
subtitle = "",
caption = paste("IRRD/PE. Fonte: SES-PE.\n Dados atualizados em ",
format(dmy(hoje), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "7 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", dmy(hoje)))) +
xlab("") +
ylab("Casos diários")
casos_interior_plot
# Salvando o html
library(plotly)
casos_interior_plot2 <- ggplotly(casos_interior_plot, width = 3, height = 6)
casos_interior_plot2
htmlwidgets::saveWidget(casos_interior_plot2,
paste(path, "casos_interior_plot.html"))
###############################################
#=================================================#
### Genomika
# Title     : Genomika
# Objective : Get API data
# Created by: ASRF
# Created on: 17/04/2020
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
# req <- httr::GET(
#   url = "http://resultados.genomika.com.br/api/v2/covid-results/",
#   add_headers("Content-Type" = "application/json",
#               "Authorization" = "Token f2f2d2e0024427241194f51481a1927a9b604ea3")
# )
#
# genomika_df <- jsonlite::fromJSON(rawToChar(req$content))
## Base de dados
library(readr)
genomika <- read_delim(paste0("~/Google Drive/Coronavirus/IRRD/planilhas de pe/", hoje, "/genomika.csv"),
";", escape_double = FALSE, trim_ws = TRUE)
# Sumário
genomika_df <- genomika
names(genomika_df)
head(genomika_df$resultado)
resultado <- as.data.frame(table(genomika_df$resultado))
resultado <- resultado %>% mutate(prop = round(100*Freq/sum(Freq), 1))
resultado
names(resultado)[1] <- "Resultado"
library(ggplot2)
# Gráfico para resultado
# Gráfico de pizza
resultado_bp <- ggplot(resultado, aes(x = "", y = Freq, fill = Resultado)) +
geom_bar(width = 1, stat = "identity", color = "white")
resultado_bp
# Pie chart
pie_resultado <- resultado_bp + coord_polar("y", start=0)
pie_resultado
# Customize
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
# Apply blank theme
library(scales)
pie_resultado= pie_resultado +  blank_theme +
theme(axis.text.x=element_blank())
pie_resultado
# Compute the position of labels
data = resultado
head(data)
data <- data %>%
arrange(desc(Resultado)) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
head(data)
# Retirar o pendente se a porcentagem for próxima de 0
#data2 = data[-2,] # Sem o Pendente
data2 = data
# Basic piechart
resultado_pie <- ggplot(data2, aes(x="", y=prop, fill=Resultado)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="bottom") +
geom_text(aes(y = ypos, label = paste(Freq, "(", prop, "%", ")", sep = "")),
color = "black", size=3) +
scale_fill_brewer(palette="Set1")
resultado_pie = resultado_pie +
ggtitle("Resultados dos testes para COVID-19 em PE\nGenomika/LIKA-UFPE") +
labs(caption = paste("IRRD/PE. Dados atualizados em", format(dmy(hoje), "%d/%m/%Y"))) +
theme(legend.title = element_blank())
resultado_pie
# Salvando em jpg
jpeg(paste(path, "genomika_dados.jpg", sep = ""),
width = 5, height = 4, units = 'in', res = 300)
resultado_pie
dev.off()
# Número de testes por dia
# Gráfico de barras
# Filtrando Data de atendimento e resultado
library(dplyr)
df_atend_result <- genomika_df %>%
dplyr::select(data_atendimento, resultado)
class(df_atend_result$data_atendimento)
df_atend_result$data_atendimento = as.Date(df_atend_result$data_atendimento)
testes_dia = table(df_atend_result$data_atendimento, df_atend_result$resultado)
testes_dia = as.data.frame(testes_dia)
names(testes_dia) = c("data_atend", "resultado", "freq")
# Incluindo o total de testes
total = as.data.frame(table(genomika_df$data_atendimento))
names(total) = c("data_atend", "freq")
total$data_atend = as.Date(total$data_atend)
total = total %>% mutate(resultado = "Total")
total = total %>% dplyr::select(data_atend, resultado, freq)
# Juntando tudo
class(testes_dia$data_atend)
testes_dia$data_atend = as.Date(testes_dia$data_atend)
testes_dia2 = rbind(testes_dia, total)
testes_dia2$resultado = as.character(testes_dia2$resultado)
str(testes_dia2)
###
testes_dia$data_atend = as.Date(testes_dia$data_atend)
plot <- ggplot(testes_dia,
aes(x = data_atend, y = freq, fill = resultado)) +
geom_bar(stat = "identity", alpha = 0.9) +
xlab("Data de atendimento") +
ylab("Quantidade de testes diários") +
scale_fill_manual(values = c("black", "blue", "yellow", "red"))+
theme_ipsum() +
theme(legend.title = element_blank(),
legend.position = "bottom",
axis.text.x = element_text(angle = 45)) +
scale_x_date(date_breaks = "7 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-17", dmy(hoje)))) +
ggtitle("Testes diários para COVID-19 em PE\nGenomika/LIKA-UFPE") +
labs(caption = paste("IRRD/PE. Dados atualizados em", format(as.Date(today()-1), "%d/%m/%Y"))) +
theme(legend.title = element_blank())
plot
#==============================#
# Salvar #
#==============================#
jpeg(paste(path, "genomika_testes.jpg", sep = ""),
width = 7, height = 6, units = 'in', res = 300)
plot
dev.off()
###################################
library('ggthemes')
library('ggthemr')
ggthemr_reset()
ggthemr("flat")
plot6 <- testes_dia2 %>%
ggplot(aes(x = data_atend, y =  resultado, fill = freq)) +
#geom_raster(color = "black") +
geom_point(size = 7, alpha = 1, shape = 22,
color = "gray") +
scale_fill_viridis_c(direction = -1)+
theme_bw()+
geom_text(aes(x = data_atend, y = resultado, label = freq), color = "black", size = 3)+
labs(x = "Data de atendimento", y = "Resultado", fill = "Quantidade \nde testes",
title = "Quantidade de testes",
subtitle = "Genomika/LIKA-UFPE",
caption = paste("IRRD-PE. Dados atualizados em",
format(as.Date(today()-1), "%d-%m-%Y"))) +
theme(axis.text.x = element_text(angle = 45, size = 8, face = "bold"))+
theme(axis.text = element_text(color = "dimgray", size = 10, face = "bold")) +
scale_x_date(date_labels = "%b %d", date_breaks = "7 days")
plot6
###################################
# Salvando em jpg
#path <- "/Users/edneideramalho/Google Drive/Coronavirus/IRRD/Informes e relatórios/graficos 28-04-2020/"
jpeg(paste(path, "genomika_testes_dia.jpg", sep = ""),
width = 13, height = 7, units = 'in', res = 300)
plot6
dev.off()
#=====================#
# Histograma de Idade #
#=====================#
class(genomika_df$data_nascimento)
# Código para idade
#idade = lubridate::time_length(difftime(Sys.Date(), data_de_nascimento), "years")
#lubridate::as_date(data_atualizacao)
library(lubridate)
genomika_df = genomika_df %>%
mutate(data_nasc = lubridate::as_date(data_nascimento),
idade = lubridate::time_length(difftime(Sys.Date(), data_nasc), "years"))
indices_excluir <- which(genomika_df$idade < 0)
genomika_df = genomika_df %>%
mutate(sexo2 = if_else(sexo == 0, "Masculino", "Feminino"))
# Outro
library(hrbrthemes)
genomika_df2 = genomika_df[-indices_excluir,]
histogram <- genomika_df2 %>%
ggplot(aes(x = idade, fill = sexo2)) +
geom_histogram(color="#e9ecef", alpha=0.75, position = 'identity') +
scale_fill_manual(values=c("#ffcc00", "#404080")) +
theme_ipsum() +
labs(fill="",
title = "Testes realizados pela \nGenomika/LIKA-UFPE",
subtitle = "",
caption = paste("IRRD. Dados atualizados em",
format(dmy(hoje), "%d/%m/%Y")))+
xlab("Idade") +
ylab("Frequência")
histogram
jpeg(paste(path, "genomika_testes_histogram.jpg", sep = ""),
width = 8, height = 6, units = 'in', res = 300)
histogram
dev.off()
##-----------------------------------------------##
###### Hospitalizados: leitos e UTI por data ######
##----------------------------------------------##
##-------------------##
##--TS Confirmados--##
##-------------------##
library(readr)
library(janitor)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(plotly)
library(hrbrthemes)
library(lubridate)
##--Base de dados--##
library(readr)
evolucao_pe <- read_delim(paste0("~/Google Drive/Coronavirus/IRRD/planilhas de pe/", hoje, "/compilada/TS_evolucao.csv"),
";", escape_double = FALSE, trim_ws = TRUE)
names(evolucao_pe)
library(janitor)
df <- clean_names(evolucao_pe)
##--Internados em leito--##
internados <- df %>%
select(data_da_base,
interna_no_hospital_municipal,
internado, internado_leito)
total_internados <- internados$interna_no_hospital_municipal + internados$internado + internados$internado_leito
internados <- internados %>%
mutate(total_internados = total_internados)
ggplot(data = internados, aes(x = data_da_base, y = total_internados)) +
geom_point()
##--Internados em UTI--##
ggplot(data = df, aes(x = data_da_base, y = internado_uti)) +
geom_line()
##--Juntando as duas informações--##
df <- df %>%
mutate(internados_leito = total_internados)
##--Gráfico--##
dfi <- df %>%
select(data_da_base, internados_leito, internado_uti)
#--Long format--##
library(tidyverse)
dfi.long <- dfi %>%
gather(key = type, value = count, -c(data_da_base))
dfi.long <- dfi.long %>%
mutate(type = if_else(type == 'internados_leito', 'Leito', 'UTI'))
plot_internados <- ggplot(data = dfi.long,
aes(x = data_da_base, y = count)) +
geom_area(aes(fill = type), alpha = 0.75) +
theme_ipsum() +
labs(title = "Hospitalizações em Pernambuco\nCOVID-19") +
scale_fill_manual(values = c('purple','red')) +
theme(legend.title = element_blank(),
legend.position = 'bottom',
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank()) +
ylab('Hospitalizações')
plot_internados
jpeg(paste(path, "plot_internados.jpg", sep = ""),
width = 5, height = 5, units = 'in', res = 300)
plot_internados
dev.off()
##--Salvando o jpg e o html--##
plot_internadosi <- ggplotly(plot_internados, width = 3, height = 6)
plot_internadosi
htmlwidgets::saveWidget(plot_internadosi,
paste(path,"plot_internados.html", sep = ""))
##--Curva de recuperados--##
plot_rec <- ggplot(df, aes(x = data_da_base, y = recuperado)) +
geom_bar(stat = "identity") +
theme_ipsum() +
ylab("Recuperados") +
xlab(" ") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Recuperados - COVID-19\nPernambuco",
caption = paste("IRRD-PE. Fonte: SES-PE.\nDados atualizados em:",
format(as.Date(today()-1), "%d/%m/%Y")))
plot_rec
plot_internadosi <- ggplotly(plot_internados, width = 3, height = 6)
plot_internadosi
htmlwidgets::saveWidget(plot_internadosi,
paste(path,"plot_internados.html", sep = ""))
##--Salvando em jpg e html--##
jpeg(paste(path, "recuperados_pe.jpg", sep = ""),
width = 5, height = 5, units = 'in', res = 300)
plot_rec
dev.off()
##--html--##
plot_reci <- ggplotly(plot_rec, width = 3, height = 6)
plot_reci
htmlwidgets::saveWidget(plot_reci,
paste(path, "recuperados_pe.html", sep = ""))
##=============================================##
##--Gráfico de novos óbitos por data de óbito--##
##============================================##
##--Filtrando os óbitos--##
obitos_geral <- confirmados_geral %>%
filter(evolucao == "ÓBITO")
##--Quantos óbitos por dia?--##
table_obito <- table(obitos_geral$data_do_obito)
head(table_obito)
##--Convertendos em data frame--##
df_obito <- as.data.frame(table_obito)
names(df_obito) <- c("data", "obitos")
head(df_obito)
##--Checando se a data está no formato correto--##
class(df_obito$data)
df_obito$data <- as.character.factor(df_obito$data)
class(df_obito$data)
head(df_obito$data)
df_obito$data_mod <- dmy(df_obito$data)
head(df_obito$data_mod)
df_obito <- df_obito %>%
arrange(data_mod)
##--Adicionando média móvel--##
media_movel_obito <- movavg(df_obito$obitos, 7, "s")
df_obito <- df_obito %>%
mutate(media_movel = media_movel_obito)
##-Gráfico--##
plot_obitos_dt_ob <- ggplot(df_obito, aes(x = data_mod)) +
geom_bar(aes(y = obitos, fill = "Óbitos"),
stat = "identity", alpha = 0.9) +
scale_fill_manual(values = c("black")) +
geom_line(aes(y = media_movel),
color = "white",
size = 3) +
geom_line(aes(y = media_movel, color = "Média móvel"),
size = 2) +
scale_color_manual(values = c("orange")) +
theme_ipsum() +
ylab("Óbitos") +
xlab("Data do óbito") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Óbitos diários por data do óbito \nCOVID-19/Pernambuco",
caption = paste("IRRD-PE. Fonte: SES-PE.\nDados atualizados em:",
format(as.Date(today()-1), "%d/%m/%Y"))) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45),
legend.title = element_blank())
plot_obitos_dt_ob
##--sem a linha branca--##
plot_obitos_dt_ob2 <- ggplot(df_obito, aes(x = data_mod)) +
geom_bar(aes(y = obitos, fill = "Óbitos"),
stat = "identity", alpha = 0.9) +
scale_fill_manual(values = c("black")) +
geom_line(aes(y = media_movel, color = "Média móvel"),
size = 2) +
scale_color_manual(values = c("orange")) +
theme_ipsum() +
ylab("Óbitos") +
xlab("Data do óbito") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Óbitos diários por data do óbito \nCOVID-19/Pernambuco",
caption = paste("IRRD-PE. Fonte: SES-PE.\nDados atualizados em:",
format(as.Date(today()-1), "%d/%m/%Y"))) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45),
legend.title = element_blank())
##--Salvando em jpg--##
jpeg(paste0(path,"obitos_pe_data_obito.jpg"), width = 8, height = 7,
units = "in", res = 300)
plot_obitos_dt_ob
dev.off()
##--Convertendo em html--##
obitos_por_data <- ggplotly(plot_obitos_dt_ob2, width = 5, height = 6)
obitos_por_data
htmlwidgets::saveWidget(obitos_por_data,
paste0(path, "obitos_por_data.html"))
{
class_final_df <- table(df$data_da_notificacao, df$classificacao_final)
class_final_df <- as.data.frame(class_final_df)
names(class_final_df) <- c("data", "classificacao", "freq")
class(class_final_df$data)
class_final_df$data <- as.character.factor(class_final_df$data)
class_final_df$data <- as.POSIXct(class_final_df$data, format = "%Y-%m-%d")
class(class_final_df$data)
class_final_df$data = as.Date(class_final_df$data)
}
{
class_final_df <- table(df$data_da_notificacao, df$classificacao_final)
class_final_df <- as.data.frame(class_final_df)
names(class_final_df) <- c("data", "classificacao", "freq")
class(class_final_df$data)
class_final_df$data <- as.character.factor(class_final_df$data)
class_final_df$data <- as.POSIXct(class_final_df$data, format = "%Y-%m-%d")
class(class_final_df$data)
class_final_df$data = as.Date(class_final_df$data)
}
{
class_final_df <- table(pe_municipios$data_da_notificacao, df$classificacao_final)
class_final_df <- as.data.frame(class_final_df)
names(class_final_df) <- c("data", "classificacao", "freq")
class(class_final_df$data)
class_final_df$data <- as.character.factor(class_final_df$data)
class_final_df$data <- as.POSIXct(class_final_df$data, format = "%Y-%m-%d")
class(class_final_df$data)
class_final_df$data = as.Date(class_final_df$data)
}
class_final_df <- table(pe_municipios$data_da_notificacao, pe_municipios$classificacao_final)
{
class_final_df <- table(pe_municipios$data_da_notificacao, pe_municipios$classificacao_final)
class_final_df <- as.data.frame(class_final_df)
names(class_final_df) <- c("data", "classificacao", "freq")
class(class_final_df$data)
class_final_df$data <- as.character.factor(class_final_df$data)
class_final_df$data <- as.POSIXct(class_final_df$data, format = "%Y-%m-%d")
class(class_final_df$data)
class_final_df$data = as.Date(class_final_df$data)
}
{
table(class_final_df$classificacao)
class(class_final_df$classificacao)
class_final_df$classificacao <- as.character.factor(class_final_df$classificacao)
table(class_final_df$classificacao)
}
{class_final_df <- class_final_df %>%
mutate(classificacao2 = if_else(classificacao == "DESCARTADO NO FORMSUS"|
classificacao == "DESCARTADONOFORMSUS",
"DESCARTADO",
if_else(classificacao == "EM INVESTIGACAO",
"EM INVESTIGAÇÃO", classificacao)))
class_final_plot = ggplot(class_final_df,
aes(x = data, y = freq, fill = classificacao2)) +
geom_bar(stat = "identity", alpha = 0.9) +
xlab("Data da notificação") +
ylab("Frequência") +
theme_ipsum() +
theme(legend.title = element_blank(),
legend.position = "bottom",
axis.text.x = element_text(angle = 90, size = 10),
legend.text = element_text(size = 7.5)) +
scale_x_date(date_breaks = "7 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-17", today())))+
ggtitle("Classificação final dos casos notificados\n em PE" ) +
labs(caption = paste("IRRD/PE. Fonte: Secretaria de Saúde de Pernambuco.\nDados atualizados em",
format(dmy(hoje), "%d/%m/%Y")))
class_final_plot}
jpeg(paste(path, "class_final_notificados_PE.jpg", sep = ""),
width = 10, height = 6, units = 'in', res = 300)
class_final_plot
dev.off()
