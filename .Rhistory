scale_color_manual(values = c("#ff5050")) +
geom_point(aes(color = pais), size = 1.5) +
theme_light() +
theme(axis.text.x = element_text(angle = 90)) #+
#scale_y_continuous(breaks = seq(0, 1200, 100))
brasil_plot <- p + scale_x_date(date_breaks = "3 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-08", today()))) +
xlab("") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Casos confirmados COVID-19",
subtitle = "Brasil",
caption = paste("IRRD/PE. Fonte: CIEVS/NUVRESP/SEVS/SES.
\n Dados atualizados em", format(today(), "%d/%m/%Y.")))
brasil_plot
jpeg(paste(path,"covid-19_confirmados_brasil.jpg",sep=""),
width = 6, height = 5, units = 'in', res = 300)
brasil_plot + scale_y_continuous(breaks = seq(0,max(brasil1$Confirmed),5000)) +
ylab("Total de casos confirmados\n(escala linear)")
dev.off()
jpeg(paste(path, "covid-19_confirmados_brasil_escala_log.jpg", sep = ""),
width = 6, height = 5, units = 'in', res = 300)
brasil_plot  + scale_y_continuous(trans = 'log10') +
ylab("Total de casos confirmados\n(escala log)")
dev.off()
#brasil1$pais = rep("Brasil", 70)
library(ggplot2)
p <- ggplot(brasil1, aes(x = date3, y = Death, group = pais)) +
geom_line(aes(color = pais), size = 1) +
scale_color_manual(values = c("#000000")) +
geom_point(aes(color = pais), size = 1.5) +
theme_light() +
theme(axis.text.x = element_text(angle = 90)) #+
#scale_y_continuous(breaks = seq(0, 1200, 100))
brasil_obito <- p + scale_x_date(date_breaks = "3 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-08", today()))) +
xlab("") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Óbitos COVID-19 no Brasil",
caption = paste("IRRD/PE. Fonte: CIEVS/NUVRESP/SEVS/SES.
\n Dados atualizados em ", format(today(), "%d/%m/%Y.")))
brasil_obito
jpeg(paste(path, "covid-19_obitos_brasil.jpg", sep = ""),
width = 6, height = 5, units = 'in', res = 300)
brasil_obito +
scale_y_continuous(breaks = seq(0,max(brasil1$Death), 250)) +
ylab("Total de óbitos\n(escala linear)")
dev.off()
jpeg(paste(path, "covid-19_obitos_brasil_log.jpg", sep = ""),
width = 6, height = 5, units = 'in', res = 300)
brasil_obito +
scale_y_continuous(trans = 'log10') +
ylab("Total de óbitos\n(escala log)")
dev.off()
# paises <- c("China", "Italy", "Iran", "Spain", "Germany", "US", "France", "Brazil")
# countries <- filter(mergedCases, Country %in%  paises)
# # Começando em 100 casos
# countries2 <- filter(countries, Confirmed >=100)
# # Reorganizando as datas
# countries2 = countries2 %>%
#   mutate(date2 = as.POSIXct(as.character(Date), format = "%m/%d/%y"),
#          date3 = as.Date(date2))
# # Criando uma variável de tempo em dias a partir do 100º caso
# lista_paises <- list(NULL)
# for(i in 1:length(paises)){
#   df <- filter(countries2, Country == paises[i])
#   t0 <- (sort(df$date3))[1]
#   df <- mutate(df, Time = as.numeric(date3 - t0))
#   lista_paises[[i]] <- df
# }
# names(lista_paises) <- paises
# # Juntando numa única base de dados
# paises100casos <- do.call(rbind, lista_paises)
# # Colocando o nome dos países em ordem
# class(paises100casos$Country)
# paises100casos$Country2 = factor(paises100casos$Country,
#                                  levels = paises)
# # Colocando o nome dos países em português
# paises100casos <- paises100casos %>%
#   mutate(Países = if_else(Country == "Italy", "Itália",
#                             if_else(Country == "Iran", "Irã",
#                                     if_else(Country == "Spain", "Espanha",
#                                             if_else(Country == "Germany",
#                                                     "Alemanha",
#                                                     if_else(Country == "Brazil", "Brasil", if_else(Country == "US", "Estados Unidos", if_else(Country == "France", "França", as.character(Country)))))))))
# library(ggplot2)
# p <- ggplot(paises100casos, aes(x = Time, y = Confirmed, group = Países)) +
#   geom_line(aes(color = Países)) +
#   geom_point(aes(color = Países)) +
#   xlab("Número de dias a partir do 100º caso") +
#   scale_x_continuous(breaks = seq(0,100,by=10)) +
#   labs(title = "COVID-19: Número acumulado de casos",
#        caption = paste("IRRD/PE. Fonte:CSSE John Hopkins University.\nDados atualizados em", format(today(), "%d/%m/%Y"))) +
#   theme(legend.title = element_blank())
#
# p + theme_minimal()
# jpeg(paste(path, "comparacao_brasil_paises.jpg"),
#      width = 10, height = 6, units = 'in', res = 300)
# p + theme_minimal() +
#   ylab("Total de casos confirmados\n(escala linear)")
# dev.off()
# p + theme_minimal() +
#   scale_y_log10()
# jpeg(paste(path,"comparacao_brasil_paises_escala_log.jpg"),
#      width = 10, height = 6, units = 'in', res = 300)
# p + theme_minimal() +
#   scale_y_log10()  + ylab("Total de casos confirmados\n(escala log)")
# dev.off()
View(brasil1)
setwd("~/Documents/GitHub/covid-19_Pernambuco")
# Carregando a base de dados limpa
library(readr)
df <- read_delim("~/Google Drive/Coronavirus/IRRD/planilhas de pe/19-04-2020/recife_att_DOTS_2020-04-19_23-26.csv",
";", escape_double = FALSE, trim_ws = TRUE)
# Aplicando a função para padronizar o nome das variáveis
library(janitor)
de <- clean_names(df)
names(de)
#path = '/Users/edneideramalho/Documents/GitHub/covid-19_Pernambuco/'
write.csv(de, "covid-19_Pernambuco.csv")
library(dplyr)
library(ggplot2)
library(readr)
library(lubridate)
path <- "/Users/edneideramalho/Google Drive/Coronavirus/IRRD/Informes e relatórios/graficos 19-04-2020/"
pe_municipios <- read.csv('https://raw.githubusercontent.com/edneide/covid-19_Pernambuco/master/covid-19_Pernambuco.csv')
df <- pe_municipios[,-1]
names(df)
class(df$classificacao_final)
# Convertendo em character
df <- data.frame(lapply(df, as.character), stringsAsFactors=FALSE)
# Checando a classe
class(df$classificacao_final)
clasificacao = as.data.frame(table(df$classificacao_final))
#ggplot(df, aes(x = reorder(Freq, -Var1), y = Freq))
#ggplot(clasificacao, aes(x = Var1, y = Freq, fill = Var1))
plot_class = ggplot(clasificacao, aes(x = reorder(Var1, -Freq), y = Freq, fill = Var1)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = Freq), color = "black") +
ggtitle(paste("Classificação final dos casos notificados de COVID-19\nem PE até",
format(as.Date(today()-1), "%d/%m/%Y"))) +
theme_bw() +
xlab("") + ylab("Frequência")
plot_class = plot_class + coord_flip() + theme(legend.position = "none") +
annotate(geom="text", x=4, y=1500, label=paste("N* = ", dim(df)[1], sep = ""),
color="black") + labs(caption = "*Número total de notificados.")
plot_class
jpeg(paste(path, "classificacao_pe.jpg", sep = ""),
width = 7, height = 4, units = 'in', res = 300)
plot_class
dev.off()
cenarios_pe = as.data.frame(table(df$classificacao_final))
cenarios_pe
confirmados = df %>%
filter(classificacao_final == "CONFIRMADO")
evolucao = as.data.frame(table(confirmados$evolucao))
evolucao
evolucao2 <- evolucao[-1, ]
evolucao2
plot_evolucao = ggplot(evolucao2, aes(x = reorder(Var1, -Freq), y = Freq, fill = Var1)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = Freq), color = "black") +
labs(title = "Casos confirmados",
subtitle = "Evolução") +
xlab("") + ylab("Frequência")
plot_evolucao + coord_flip() + theme(legend.position = "none")
# Gráfico de pizza
bp_evolucao <- ggplot(evolucao2, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(width = 1, stat = "identity", color = "white")
bp_evolucao
# Pie chart
pie_evolucao <- bp_evolucao + coord_polar("y", start=0)
# Customize
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
# Apply blank theme
library(scales)
plot_evolucao = pie_evolucao +  blank_theme +
theme(axis.text.x=element_blank())
# Compute the position of labels
data = evolucao2
data <- data %>%
arrange(desc(Var1)) %>%
mutate(prop = Freq / sum(data$Freq) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
# Basic piechart
names(data)[1] <- "Evolução"
evolucao_pie <- ggplot(data, aes(x="", y=prop, fill=Evolução)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
geom_text(aes(y = ypos, label = paste(round(prop,1), "%", sep = "")),
color = "black", size=3) +
scale_fill_brewer(palette="Set1") +   theme(legend.title = element_blank())
evolucao_pie = evolucao_pie +
ggtitle(paste("Evolução dos casos confirmados de COVID-19 \nem PE até",
format(as.Date(today()-1), "%d/%m/%Y"))) +
labs(caption = paste("Número de casos confirmados = ", dim(confirmados)[1]))
evolucao_pie
jpeg(paste(path, "evolucao_pie_pe.jpg", sep = ""),
width = 6, height = 4, units = 'in', res = 300)
evolucao_pie
dev.off()
sexo = as.data.frame(table(confirmados$sexo))
sexo
names(sexo) <- c("Sexo", "value")
#View(sexo)
# Gráfico de pizza
sexo_bp <- ggplot(sexo, aes(x = "", y = value, fill = Sexo)) +
geom_bar(width = 1, stat = "identity", color = "white")
sexo_bp
# Pie chart
pie_sexo <- sexo_bp + coord_polar("y", start=0)
pie_sexo
# Customize
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
# Apply blank theme
library(scales)
pie_sexo = pie_sexo +  blank_theme +
theme(axis.text.x=element_blank())
pie_sexo
# Compute the position of labels
data = sexo
data <- data %>%
arrange(desc(Sexo)) %>%
mutate(prop = value / sum(data$value) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
# Basic piechart
sexo_pizza <- ggplot(data, aes(x="", y=prop, fill=Sexo)) +
geom_bar(stat="identity", width=1, color="black") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="bottom") +
geom_text(aes(y = ypos, label = paste(round(prop,1), "%", sep = "")),
color = "white", size=6) +
scale_fill_brewer(palette="Set1")
sexo_pizza = sexo_pizza + ggtitle(paste("Sexo - Casos confirmados de COVID-19 \nem PE até", format(as.Date(today()-1), "%d/%m/%Y"))) +
labs(caption = paste("Total de casos confirmados = ", dim(confirmados)[1])) +
theme(legend.title = element_blank())
sexo_pizza
# Salvando em jpg
#jpeg(paste(path, "sexo_pe.jpg", sep = ""),
#     width = 4, height = 4, units = 'in', res = 300)
#dev.off()
jpeg(paste(path, "sexo_pe.jpg", sep = ""),
width = 4, height = 4, units = 'in', res = 300)
sexo_pizza
dev.off()
#df$Classificação.final <- factor()
#hospital = df %>% filter(EVOLUÇÃO == "INTERNADO", Classificação.final == "CONFIRMADO")
# Leito de isolamento
hospital = df %>%
filter(evolucao == "INTERNADO LEITO DE ISOLAMENTO",
classificacao_final == "CONFIRMADO")
hospital = hospital %>%
mutate(local_internamento2 = if_else(local_internamento == "HUOC",
"HOSPITAL OSWALDO CRUZ", if_else(local_internamento == "HOSPITAL PORTUGÊS", "HOSPITAL PORTUGUÊS",if_else(local_internamento == "UPA SÃO LOURENÇO", "UPA SÃO LOURENÇO DA MATA",
if_else(local_internamento == "HR", "HOSPITAL DA RESTAURAÇÃO",
if_else(local_internamento == "HOSPITAL PELOPIDAS SILVEIRA",  "HOSPITAL PELÓPIDAS SILVEIRA",as.character(local_internamento)))))))
hosp1 <- as.data.frame(table(hospital$local_internamento2))
hosp1$Var1 = as.character.factor(hosp1$Var1)
hosp1$Var1
# Gráfico
library(ggplot2)
#ggplot(df, aes(x = reorder(Freq, -Var1), y = Freq))
#ggplot(clasificacao, aes(x = Var1, y = Freq, fill = Var1))
plot_hospital = ggplot(hosp1, aes(x = reorder(Var1, -Freq), y = Freq, fill = Var1)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = Freq), color = "black") +
labs(title = paste("Pacientes internados com COVID-19 \nem PE até", format(as.Date(today()-1), "%d/%m/%Y")),
subtitle = "Leito de isolamento") +
xlab("") + ylab("Frequência")
plot_hospital + coord_flip() + theme(legend.position = "none")
jpeg(paste(path, "internado_leitoPE.jpg", sep = ""),
width = 14, height = 10, units = 'in', res = 300)
plot_hospital + coord_flip() + theme(legend.position = "none")
dev.off()
# UTI
hospital2 = df %>%
filter(evolucao == "INTERNADO UTI",
classificacao_final == "CONFIRMADO")
table(hospital2$local_internamento)
hospital2 = hospital2 %>%
mutate(local_internamento2 = if_else(local_internamento == "HUOC",
"HOSPITAL OSWALDO CRUZ",
if_else(local_internamento == "HOSPITAL PORTUGUÊS", "REAL HOSPITAL PORTUGUÊS", as.character(local_internamento))))
table(hospital2$local_internamento2)
hosp2 <- as.data.frame(table(hospital2$local_internamento2))
# Gráfico
library(ggplot2)
plot_hospital2 = ggplot(hosp2, aes(x = reorder(Var1, -Freq), y = Freq, fill = Var1)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = Freq), color = "black") +
labs(title = paste("Pacientes internados com COVID-19 \nem PE até",
format(as.Date(today()-1), "%d/%m/%Y")),
subtitle = "UTI") +
xlab("") + ylab("Frequência")
plot_hospital2 + coord_flip() + theme(legend.position = "none")
jpeg(paste(path, "internados_uti_pe.jpg", sep = ""),
width = 8, height = 7, units = 'in', res = 300)
plot_hospital2 + coord_flip() + theme(legend.position = "none")
dev.off()
#df$Classificação.final <- factor()
municipio = as.data.frame(table(confirmados$municipio))
municipio$municipio = c(as.character(municipio$Var1))
# Classificação como fator
library(ggplot2)
#ggplot(df, aes(x = reorder(Freq, -Var1), y = Freq))
#ggplot(clasificacao, aes(x = Var1, y = Freq, fill = Var1))
plot_municipio = ggplot(municipio, aes(x = reorder(municipio, -Freq), y = Freq, fill = Var1)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = Freq), size = 3, color = "black") +
ggtitle("Município de residência para os casos confirmados") +
xlab("") + ylab("Frequência")
plot_municipio + coord_flip() + theme(legend.position = "none")
confirmados$idade = as.numeric(confirmados$idade)
head(confirmados$idade)
# Change line color and fill color
# histograma =ggplot(confirmados, aes(x=idade))+
#   geom_histogram(color="black", fill="deepskyblue",
#                  breaks=seq(0, 100, by=10), alpha = 0.5) +
#   ggtitle("Faixa etária para os casos confirmados de COVID-19 em PE") +
#   xlab("Idade") + ylab("Frequência") +
#   labs(caption = paste("IRRD/PE. Fonte: Secretaria de Saúde de Pernambuco. Dados até",
#                        format(as.Date(today()-1), "%d/%m/%Y")))+
#   scale_x_continuous(breaks = seq(0, 100, by = 10)) +
#   scale_y_continuous(breaks = seq(0, 500, 25))
# histograma
class(confirmados$idade)
confirmados = confirmados %>% mutate(idade_cat = if_else(idade < 10, "0-9",
if_else(between(idade, 10, 19), "10-19",
if_else(between(idade, 20, 29), "20-29", if_else(between(idade, 30, 39), "30-39",
if_else(between(idade, 40, 49), "40-49", if_else(between(idade, 50, 59), "50-59", if_else(between(idade, 60, 69), "60-69", if_else(between(idade, 70, 79), "70-79", "80 e mais")))))))))
idadeCategoria = as.data.frame(table(confirmados$idade_cat))
idadeCategoria
plot_idadecat = ggplot(idadeCategoria, aes(x = Var1,
y = Freq)) +
geom_bar(stat = "identity", position = position_dodge(), fill = "blue",
alpha = 0.75) +
geom_text(aes(label = Freq), color = "black") +
ggtitle(paste("Faixa etária dos casos confirmados de COVID-19\nem PE até",
format(as.Date(today()-1), "%d/%m/%Y"))) +
theme_light() +
xlab("") + ylab("Frequência")
plot_idadecat
jpeg(paste(path, "barra_idade.jpg", sep = ""),
width = 6, height = 4, units = 'in', res = 300)
plot_idadecat
dev.off()
df_obito <- confirmados %>%
filter(evolucao == "ÓBITO")
dim(df_obito)[1]
paste("letalidade = ", round(100*dim(df_obito)[1]/dim(confirmados)[1],2), "%", sep = "")
summary(df_obito$idade)
sd(df_obito$idade)
idadeobito <- as.data.frame(table(df_obito$idade_cat))
plot_idadecatobito = ggplot(idadeobito, aes(x = Var1,
y = Freq)) +
geom_bar(stat = "identity", position = position_dodge(), fill = "darkred",
alpha = 0.75) +
geom_text(aes(label = Freq), color = "black") +
ggtitle(paste("Faixa etária dos óbitos de COVID-19\nem PE até",
format(as.Date(today()-1), "%d/%m/%Y"))) +
theme_bw() +
xlab("") + ylab("Frequência")
plot_idadecatobito
jpeg(paste(path, "barra_idadeobito.jpg", sep = ""),
width = 6, height = 4, units = 'in', res = 300)
plot_idadecatobito
dev.off()
df_obito = df_obito %>% mutate(idosos = if_else(idade >= 60, "Idoso", "Não Idoso"))
props = as.data.frame(table(df_obito$idosos)) %>%
mutate(prop = round(100*Freq/sum(Freq), 2))
props
residencia = as.data.frame(table(df_obito$municipio)) %>%
mutate(prop = round(100*Freq/sum(Freq),2))
residencia %>% arrange(desc(Freq))
write.csv(residencia, paste(path, "obito_residencia_pe.csv"))
round(sum(residencia$prop),1)
names(confirmados)
confirmados2 <- select(confirmados, municipio, geres)
geres = filter(confirmados2, geres == "XII")
unique(geres$municipio)
df_sintomas <- as.data.frame(table(confirmados$data_dos_primeiros_sintomas))
names(df_sintomas) <- c("data", "casos")
sum(df_sintomas$casos)
df_sintomas
class(df_sintomas$data)
df_sintomas$data = as.character.factor(df_sintomas$data)
df_sintomas$data = as.Date(df_sintomas$data, format = "%d/%m/%Y")
class(df_sintomas$data)
class(df_sintomas$data)
df_sintomas <- df_sintomas %>% filter(data <= as.Date(today()))
#library(ggdark)
plot_newcases <- ggplot(df_sintomas, aes(x = data, y = casos)) +
geom_bar(stat="identity", color = "black", fill = "darkgoldenrod1", alpha = 0.9) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Número de novos casos COVID-19",
subtitle = "Pernambuco",
caption = paste("IRRD/PE. Fonte: Secretaria de Saúde de Pernambuco\n Dados atualizados em ", format(as.Date(today()), "%d/%m/%Y"))) +
xlab("Data do início dos sintomas") + ylab("Novos casos") +
scale_x_date(date_breaks = "5 days", date_labels = "%b %d",
limits = as.Date(c("2020-01-03", max(df_sintomas$data)))) +
scale_y_continuous(breaks = seq(0, max(df_sintomas$casos), by =10))
plot_newcases
jpeg(paste(path, "histograma_casos_sintomas.jpg", sep = ""),
width = 6, height = 5, units = 'in', res = 300)
plot_newcases
dev.off()
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
req <- httr::GET(
url = "https://resultados.genomika.com.br/api/v2/covid-results/",
add_headers("Content-Type" = "application/json",
"Authorization" = "Token f2f2d2e0024427241194f51481a1927a9b604ea3")
)
data <- jsonlite::fromJSON(rawToChar(req$content))
write.csv(data, "genomika.csv", row.names = TRUE)
# Sumário
names(data)
head(data$resultado)
resultado <- as.data.frame(table(data$resultado))
resultado <- resultado %>% mutate(prop = round(100*Freq/sum(Freq), 1))
names(resultado)[1] <- "Resultado"
# Gráfico para resultado
# Gráfico de pizza
resultado_bp <- ggplot(resultado, aes(x = "", y = Freq, fill = Resultado)) +
geom_bar(width = 1, stat = "identity", color = "white")
# Pie chart
pie_resultado <- resultado_bp + coord_polar("y", start=0)
pie_resultado
# Customize
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
# Apply blank theme
library(scales)
pie_resultado= pie_resultado +  blank_theme +
theme(axis.text.x=element_blank())
pie_resultado
# Compute the position of labels
data = resultado
View(data)
data <- data %>%
arrange(desc(Resultado)) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
head(data)
data = data[-2,]
# Basic piechart
resultado_pie <- ggplot(data, aes(x="", y=prop, fill=Resultado)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="bottom") +
geom_text(aes(y = ypos, label = paste(Freq, "(", prop, "%", ")", sep = "")),
color = "black", size=3) +
scale_fill_brewer(palette="Set1")
resultado_pie = resultado_pie +
ggtitle("Resultados dos testes COVID-19 em PE\nGenomika") +
labs(caption = paste("* 1 exame pendente (0,1%).\nIRRD/PE. Dados atualizados em", format(as.Date(today()), "%d/%m/%Y"))) +
theme(legend.title = element_blank())
resultado_pie
# Basic piechart
resultado_pie <- ggplot(data, aes(x="", y=prop, fill=Resultado)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="bottom") +
geom_text(aes(y = ypos, label = paste(Freq, "(", prop, "%", ")", sep = "")),
color = "black", size=3) +
scale_fill_brewer(palette="Set1")
resultado_pie = resultado_pie +
ggtitle("Resultados dos testes COVID-19 em PE\nGenomika") +
labs(caption = paste("* 1 exame pendente (0,1%).\nIRRD/PE. Dados atualizados em", format(as.Date(today()-1), "%d/%m/%Y"))) +
theme(legend.title = element_blank())
resultado_pie
# Salvando em jpg
path <- "/Users/edneideramalho/Google Drive/Coronavirus/IRRD/Informes e relatórios/graficos 18-04-2020/"
jpeg(paste(path, "genomika_dados.jpg", sep = ""),
width = 5, height = 4, units = 'in', res = 300)
resultado_pie
# Salvando em jpg
path <- "/Users/edneideramalho/Google Drive/Coronavirus/IRRD/Informes e relatórios/graficos 19-04-2020/"
jpeg(paste(path, "genomika_dados.jpg", sep = ""),
width = 5, height = 4, units = 'in', res = 300)
resultado_pie
dev.off()
