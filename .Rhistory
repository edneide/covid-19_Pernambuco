axis.text.x = element_text(size = 8)) +
geom_label_repel(label = labels, show.legend = F)
plot_mortes_casos
# Plotly
plot_mortes_casos2 <- ggplot(pe_mod, aes(x = date, y = value, colour = variable)) +
geom_line() + geom_point(size = 1) +
scale_color_manual(values=c("blue", "red")) +
theme_ipsum() +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Casos confirmados \ne óbitos COVID-19 em PE",
subtitle = "Pernambuco",
caption = paste("IRRD/PE. Fonte: https://covid.saude.gov.br/.\n Dados atualizados em ",
format(as.Date(today()), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "3 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()-1))) +
xlab("Data de notificação a partir da 1ª morte") +
ylab("Quantidade de ocorrências") +
theme(legend.title = element_blank(),
legend.position = "bottom")
#====================================================================#
##--Escala linear--##
library(plotly)
pe_cases_deaths_linear <- ggplotly(plot_mortes_casos2,
width = 3, height = 6)
pe_cases_deaths_linear
htmlwidgets::saveWidget(pe_cases_deaths_linear,
paste(path, "pe_cases_deaths_linear.html"))
#===================================================================#
#====================================================================#
##--Escala logaritmica--##
library(plotly)
pe_cases_deaths_log <- plot_mortes_casos2 +
scale_y_continuous(trans = 'log10') +
ylab("Quantidade de ocorrências\n(escala log)")
pe_cases_deaths_logi <- ggplotly(pe_cases_deaths_log,
width = 3, height = 6)
pe_cases_deaths_logi
htmlwidgets::saveWidget(pe_cases_deaths_logi,
paste(path, "pe_cases_deaths_log.html"))
#===================================================================#
# Grid
# Escala linear
plot1 <- plot_mortes_casos +
scale_y_continuous(breaks = seq(0, max(pe_mod$value, na.rm = TRUE), 10000)) +
ylab("Quantidade de ocorrências\n(escala linear)")
# Escala log
plot2 <- plot_mortes_casos +
scale_y_continuous(trans = 'log10') +
ylab("Quantidade de ocorrências\n(escala log)")
plot_casos_deaths_PE = grid.arrange(plot1, plot2, ncol = 2)
# Salvando em jpg
g <- arrangeGrob(plot1, plot2, ncol=2)
ggsave(file= paste(path, "covid-19_pernambuco_confirmados_mortes.jpg"), g,
dpi = 300, width = 14, height = 7, units = 'in')
##=======================##
##--Novos casos por dia--##
##=======================##
pe <- pe %>%
mutate(newCases2 = totalCases - lag(totalCases, n = 1))
plot_newcases <- ggplot(pe, aes(x = date, y = newCases, group = state)) +
geom_bar(stat="identity", color = "black", fill = "yellow", alpha = 0.9) +
geom_text(aes(label=newCases), color = "black",
position=position_dodge(width=0.9), size = 2, angle = 90)+
theme_ipsum() +
theme(axis.text.x = element_text(angle = 90)) +
scale_x_date(date_breaks = "5 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-11", today()))) +
labs(title = "Número de novos casos COVID-19",
subtitle = "Pernambuco",
caption = paste("IRRD/PE. Fonte: https://covid.saude.gov.br/ \n Dados atualizados em ", format(as.Date(today()), "%d/%m/%Y"))) +
xlab("Data de notificação") + ylab("Novos casos")
plot_newcases
#====================================================================#
# Plotly
plot_new_cases_pe <- ggplot(pe, aes(x = date, y = newCases, group = state)) +
geom_bar(stat="identity", color = "black", fill = "yellow", alpha = 0.9) +
theme_ipsum() +
theme(axis.text.x = element_text(angle = 90)) +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-11", today()))) +
labs(title = "Número de novos casos \n COVID-19 em PE",
subtitle = "Pernambuco",
caption = paste("IRRD/PE. Fonte: https://covid.saude.gov.br/ \n Dados atualizados em ", format(as.Date(today()), "%d/%m/%Y"))) +
xlab("Data de notificação") + ylab("Novos casos")
plot_new_cases_pei <- ggplotly(plot_new_cases_pe, width = 3, height = 6)
plot_new_cases_pei
htmlwidgets::saveWidget(plot_new_cases_pei,
paste(path, "plot_new_cases_pe.html"))
#===================================================================#
# Novos óbitos por dia
day1 = pe$date[1]
pe = pe %>% mutate(new.deaths = ifelse(date == day1, NA, deaths - lag(deaths, k=1)))
plot_newdeaths <- ggplot(pe, aes(x = date, y = new.deaths, group = state)) +
geom_bar(stat="identity", color = "black", fill = "blue", alpha = 0.9) +
geom_text(aes(label=new.deaths), color = "black", size = 2.5,
position=position_dodge(width=0.9), vjust=-0.25)+
theme_ipsum() +
theme(axis.text.x = element_text(angle = 90)) +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-20", today()))) +
labs(title = "Número de novos óbitos COVID-19",
subtitle = "Pernambuco",
caption = paste("IRRD/PE. Fonte: Secretaria de Saúde de Pernambuco\n Dados atualizados em ", format(as.Date(today()), "%d/%m/%Y"))) +
xlab("Data de notificação") + ylab("Novos óbitos")
plot_newdeaths
# Salvando em jpg
novos_casosMortes  <- arrangeGrob(plot_newcases, plot_newdeaths, ncol=2)
ggsave(file= paste(path, "new_cases_deaths.jpg"), novos_casosMortes,
dpi = 300, width = 14, height = 7, units = 'in')
#====================================================================#
# Plotly
plot_new_deaths_pe <- ggplot(pe, aes(x = date, y = new.deaths, group = state)) +
geom_bar(stat="identity", color = "black", fill = "blue", alpha = 0.9) +
theme_ipsum() +
theme(axis.text.x = element_text(angle = 90)) +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-20", today()))) +
labs(title = "Número de novos óbitos \nCOVID-19 em PE",
subtitle = "Pernambuco",
caption = paste("IRRD/PE. Fonte: Secretaria de Saúde de Pernambuco\n Dados atualizados em ", format(as.Date(today()), "%d/%m/%Y"))) +
xlab("Data de notificação") + ylab("Novos óbitos")
plot_new_deaths_pei <- ggplotly(plot_new_deaths_pe,
width = 3, height = 6)
plot_new_deaths_pei
htmlwidgets::saveWidget(plot_new_deaths_pei,
paste(path, "plot_new_deaths_pe.html"))
#===================================================================#
##--Top 7 - Estados--##
top5_br <- df %>% filter(date == max(date)) %>%
mutate(ranking = dense_rank(desc(totalCases)))
k <- 7
top5br <- top5_br %>%
filter(ranking <= k + 1) %>%
arrange(ranking) %>%
pull(state) %>%
as.character()
top5br
#===================================================#
## Pernambuco em comparação com "SP"    "RJ"    "CE"    "PA"    "AM"    "MA"    "PE"
# Bases por estado
sp <- filter(df, state == "SP")
rj <- filter(df, state == "RJ")
ce <- filter(df, state == "CE")
pa <- filter(df, state == "PA")
am <- filter(df, state == "AM")
ma <- filter(df, state == "MA")
estados <- c("São Paulo",
"Rio de Janeiro" ,
"Ceará",
"Pará",
"Amazonas",
"Maranhão")
# Juntando as bases
estados_data <- rbind(sp, rj, ce, pa, am, ma, pe[,-c(16,17)])
estados_data$state <- factor(estados_data$state,
levels = c("SP", "RJ", "CE", "PA", "AM", "MA", "PE"))
# Gráfico
plot_comp <- ggplot(estados_data,
aes(x = date, y = totalCases, group = state)) +
geom_line(aes(color = state)) +
geom_point(aes(color = state), alpha = 0.5) +
theme_ipsum() +
xlab("") +
labs(title = "Casos confirmados COVID-19",
subtitle = "Alguns estados do Brasil",
caption = paste("IRRD/PE. Fonte:https://github.com/wcota/covid19br/. \nDados atualizados em",
format(as.Date(today()), "%d/%m/%Y"))) +
theme(legend.title=element_blank())+
theme(axis.text.x = element_text(angle = 90)) +
scale_x_date(date_breaks = "5 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-12", today())))
plot_comp
# Salavando em jpg
plot_comp1 = plot_comp +
scale_y_continuous(breaks = seq(0,max(estados_data$totalCases),10000)) +
ylab("Casos confirmados\n(escala linear)")
plot_comp2 = plot_comp + scale_y_continuous(trans = 'log10') +
ylab("Casos confirmados\n(escala log)")
#save
plot_comparacoes  <- arrangeGrob(plot_comp1, plot_comp2, ncol=2)
ggsave(file= paste(path, "covid-19_comparativo_brasil.jpg"), plot_comparacoes,
dpi = 300, width = 12, height = 5, units = 'in')
#==============================================#
# Plotly
plot_comp1i <- ggplotly(plot_comp1, width = 3, height = 6)
plot_comp1i
htmlwidgets::saveWidget(plot_comp1i,
paste(path, "plot_compare_brasil_linear.html"))
##--Escala log--##
plot_comp_log <- ggplotly(plot_comp2, width = 3, height = 6)
plot_comp_log
htmlwidgets::saveWidget(plot_comp_log,
paste(path, "plot_compare_brasil_log.html"))
#==============================================#
#===============================#
# Médias móveis de óbito em PE  #
#===============================#
library(pracma) # biblioteca para calcular média móvel
library(ggplot2)
obitos_pe <- pe_mod %>%
filter(variable == "óbitos") %>%
dplyr::select(value) %>% na.omit() %>% pull()
# "s" é para média móvel simples
y <- movavg(obitos_pe, 2, "s")
y2 <- movavg(obitos_pe, 30, "s")
# Juntando numa date frame
mov_avg_death <- data.frame(obitos_pe, y, y2)
mov_avg_death <- mov_avg_death %>%
mutate(x = seq(1, dim(mov_avg_death)[1]))
ggplot(mov_avg_death) +
geom_line(aes(x = x, y = y), color = "blue") +
geom_line(aes(x = x, y = y2), color = "red") +
geom_line(aes(x = x, y = obitos_pe), color = "green")
# Média móvel para os novos óbitos
new_deaths <- obitos_pe - lag(obitos_pe, n = 1)
new_deaths = na.omit(new_deaths)
new_deaths5 <- movavg(new_deaths, 5, "s")
new_deaths7 <- movavg(new_deaths, 7, "s")
new_deathsDF <- data.frame(new_deaths, new_deaths5, new_deaths7)
new_deathsDF <- new_deathsDF %>%
mutate(x = seq(1, dim(new_deathsDF)[1]))
# Gráfico
new_deathsDF = melt(new_deathsDF, id = "x")
ggplot(new_deathsDF, aes(x = x, y = value, color = variable)) +
geom_line()
# selecionando só média móvel para 5 dias
new_deathsDF2 = new_deathsDF %>%
filter(variable == "new_deaths5") %>%
ggplot(aes(x = x, y = value), color = "darkblue") +
geom_line() +
theme_ipsum()
novas_mortes_media_movel = new_deathsDF2 +
labs(fill="",
title = "Novas mortes no estado de PE",
subtitle = "Média móvel de 5 dias",
caption = paste("Média móvel simples. \nIRRD. Fonte: Ministério da Saúde. \nDados atualizados em",
format(as.Date(today()), "%d/%m/%Y")))+
xlab("") +
ylab("novas mortes")
novas_mortes_media_movel
# Salvando em jpeg
jpeg(paste(path, "media_movel_5_mortes_PE.jpg", sep = ""),
width = 6, height = 6, units = 'in', res = 300)
novas_mortes_media_movel
dev.off()
#==========================================================#
#--Número diário de casos em PE e média móvel de 7 dias--##
#==========================================================#
new_cases_PE <- pe %>%
select(date, newCases) %>%
mutate(moving_avg = movavg(newCases, 7, "s")) ## Adicionando média móvel de 7 dias
total_cases_PE <- pe$totalCases[length(pe$totalCases)]
library(ggplot2)
library(hrbrthemes)
casos_PE_movavg <- ggplot(data = new_cases_PE, aes(x = date)) +
geom_bar(aes(y = newCases, color = "Casos por dia"),
fill = "black",
stat="identity", alpha = 0.9)+
geom_point(aes(y = moving_avg),
color = "white", size = 3) +
geom_point(aes(y = moving_avg, color = "Média móvel (7 dias)")) +
geom_line(aes(y = moving_avg, color = "Média móvel (7 dias)"))+
scale_color_manual(values = c("black", "orange")) +
theme_ipsum() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45),
legend.title = element_blank()) +
labs(title = paste("Total de casos de COVID-19 \nem PE:", total_cases_PE),
subtitle = "",
caption = paste("IRRD/PE. Fonte: https://covid.saude.gov.br/.\n Dados atualizados em ",
format(as.Date(today()), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()-1))) +
xlab("") +
ylab("Casos diários")
casos_PE_movavg
# Salvando o html
library(plotly)
casos_PE <- ggplotly(casos_PE_movavg, width = 3, height = 6)
casos_PE
htmlwidgets::saveWidget(casos_PE,
paste(path, "cases_PE_moving_average.html"))
#==========================================================#
#--Número diário de óbitos em PE e média móvel de 7 dias--##
#==========================================================#
new_deaths_PE <- pe %>%
select(date, newDeaths) %>%
mutate(moving_avg = movavg(newDeaths, 7, "s")) ## Adicionando média móvel de 7 dias
total_deaths_PE <- pe$deaths[length(pe$deaths)]
library(ggplot2)
library(hrbrthemes)
deaths_PE_movavg <- ggplot(data = new_deaths_PE, aes(x = date)) +
geom_bar(aes(y = newDeaths, color = "Óbitos por dia"),
fill = "darkblue",
stat="identity", alpha = 0.9)+
geom_point(aes(y = moving_avg),
color = "white", size = 3) +
geom_point(aes(y = moving_avg, color = "Média móvel (7 dias)")) +
geom_line(aes(y = moving_avg, color = "Média móvel (7 dias)"))+
scale_color_manual(values = c("orange", "darkblue")) +
theme_ipsum() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45),
legend.title = element_blank()) +
labs(title = paste("Total de óbitos por COVID-19 \nem PE:", total_deaths_PE),
subtitle = "",
caption = paste("IRRD/PE. Fonte: https://covid.saude.gov.br/.\n Dados atualizados em ",
format(as.Date(today()), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()-1))) +
xlab("") +
ylab("Óbitos diários")
deaths_PE_movavg
# Salvando o html
library(plotly)
deaths_PE <- ggplotly(deaths_PE_movavg, width = 3, height = 6)
deaths_PE
htmlwidgets::saveWidget(deaths_PE,
paste(path, "deaths_PE_moving_average.html"))
#######################
#### Brasil ###########
#######################
base_brasil <- read_csv("https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-states.csv",
col_types = cols(URL = col_skip(), country = col_skip()))
brasil <- filter(base_brasil, state == "TOTAL")
names(brasil)
brasil_mod = brasil %>%
dplyr::select(date, totalCasesMS, deathsMS)
brasil_mod = melt(brasil_mod, id = "date")
brasil_mod$variable = as.character.factor(brasil_mod$variable)
brasil_mod = brasil_mod %>%
mutate(var = if_else(variable == "totalCasesMS", "casos", "óbitos"))
# Adicionando etiqueta
# Criando as etiquetas
indices_casos = which(brasil_mod$var == "casos")
indices_obitos = which(brasil_mod$var == "óbitos")
# Últimos índices
ultimo_caso = indices_casos[length(indices_casos)]
ultimo_obito = indices_obitos[length(indices_obitos)]
# Criando a variavel
labels <- c(rep(NA, length(indices_casos)-1), brasil_mod$value[ultimo_caso],
rep(NA, length(indices_obitos)-1), brasil_mod$value[ultimo_obito])
brasil_mod$labels = labels
# Gráfico
library(hrbrthemes)
plot_casos_mortesBR <- ggplot(brasil_mod,
aes(x = date,
y = value,
colour = var)) +
geom_line() +
geom_point() +
scale_color_manual(values=c("blue", "darkred")) +
theme_ipsum() +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Casos confirmados \ne óbitos COVID-19",
subtitle = "Brasil",
caption = paste("IRRD/PE. Fonte: https://github.com/wcota/covid19br/\n Dados atualizados em",
format(as.Date(today()), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()))) +
xlab("Data da notificação") +
theme(legend.title = element_blank(),
legend.position = "bottom")
plot_casos_mortesBR
plot_casos_mortesBR1 = plot_casos_mortesBR +
geom_label_repel(label = labels, show.legend = F)
plot_casos_mortesBR1
plot_casos_mortesBR2 = plot_casos_mortesBR +
geom_label_repel(label = labels,
point.padding =  0.2,
nudge_x = .05,
nudge_y = .15,
show.legend = F)
plot_casos_mortesBR2
# Escala linear
plotBR1 <- plot_casos_mortesBR2 +
ylab("Quantidade de ocorrências\n(escala linear)")
plotBR1
plotBR2 <- plot_casos_mortesBR2 +
scale_y_continuous(trans = 'log10') +
ylab("Quantidade de ocorrências\n(escala log)")
plotBR2
#save
plotBR_casos_obitos  <- arrangeGrob(plotBR1, plotBR2, ncol=2) #generates g
ggsave(file= paste(path, "covid-19_brasil_casos_obitos.jpg"), plotBR_casos_obitos,
dpi = 300, width = 12, height = 5, units = 'in') #saves g
#==================================================#
# Plotly
plotBR1i <- ggplot(brasil_mod,
aes(x = date,
y = value,
colour = var)) +
geom_line() +
geom_point() +
scale_color_manual(values=c("blue", "darkred")) +
theme_ipsum() +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Casos confirmados e óbitos \n COVID-19 no Brasil",
subtitle = "Brasil",
caption = paste("IRRD/PE. Fonte: https://https://github.com/wcota/covid19br/\n Dados atualizados em",
format(as.Date(today()), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "5 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()))) +
xlab("Data da notificação") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
ylab("Quantidade de ocorrências\n(escala linear)")
plotBR1i
plotBR1ii <- ggplotly(plotBR1i, width = 3, height = 6)
plotBR1ii
htmlwidgets::saveWidget(plotBR1ii,
paste(path, "cases_deaths_BR.html"))
library(plotly)
### escala logaritmica
plotBR2i <- ggplot(brasil_mod,
aes(x = date,
y = value,
colour = var)) +
geom_line() +
geom_point() +
scale_color_manual(values=c("blue", "darkred")) +
theme_ipsum() +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Casos confirmados e óbitos \n COVID-19 no Brasil",
subtitle = "Brasil",
caption = paste("IRRD/PE. Fonte: https://covid.saude.gov.br/\n Dados atualizados em",
format(as.Date(today()-1), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()))) +
xlab("Data da notificação") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_y_continuous(trans = 'log10') +
ylab("Quantidade de ocorrências\n(escala log)")
plotBR2ii <- ggplotly(plotBR2i, width = 3, height = 6)
plotBR2ii
htmlwidgets::saveWidget(plotBR2ii,
paste(path,"cases_deaths_BR_log.html",sep=""))
#=============================================================#
#--Número diário de casos no Brasil e média móvel de 7 dias--##
#=============================================================#
new_cases_BR <- brasil %>%
select(date, newCases) %>%
mutate(moving_avg = movavg(newCases, 7, "s")) ## Adicionando média móvel de 7 dias
total_cases_BR <- brasil$totalCases[length(brasil$totalCases)]
library(ggplot2)
library(hrbrthemes)
cases_BR_movavg <- ggplot(data = new_cases_BR, aes(x = date)) +
geom_bar(aes(y = newCases, color = "Casos por dia"),
fill = "black",
stat="identity", alpha = 0.9)+
geom_point(aes(y = moving_avg),
color = "white", size = 3) +
geom_point(aes(y = moving_avg, color = "Média móvel (7 dias)")) +
geom_line(aes(y = moving_avg, color = "Média móvel (7 dias)"))+
scale_color_manual(values = c("black","orange")) +
theme_ipsum() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45),
legend.title = element_blank()) +
labs(title = paste("Total de casos de COVID-19 \nno Brasil:", total_cases_BR),
subtitle = "",
caption = paste("IRRD/PE. Fonte: https://covid.saude.gov.br/.\n Dados atualizados em ",
format(as.Date(today()), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()-1))) +
xlab("") +
ylab("Casos diários")
cases_BR_movavg
# Salvando o html
library(plotly)
cases_BR_movavgPlot <- ggplotly(cases_BR_movavg, width = 3, height = 6)
cases_BR_movavgPlot
htmlwidgets::saveWidget(cases_BR_movavgPlot,
paste(path, "cases_BR_movavg.html"))
#=============================================================#
#--Número diário de óbitos no Brasil e média móvel de 7 dias--##
#=============================================================#
new_deaths_BR <- brasil %>%
select(date, newDeaths) %>%
mutate(moving_avg = movavg(newDeaths, 7, "s")) ## Adicionando média móvel de 7 dias
total_deaths_BR <- brasil$deaths[length(brasil$deaths)]
library(ggplot2)
library(hrbrthemes)
deaths_BR_movavg <- ggplot(data = new_deaths_BR, aes(x = date)) +
geom_bar(aes(y = newDeaths, color = "Óbitos por dia"),
fill = "darkblue",
stat="identity", alpha = 0.9)+
geom_point(aes(y = moving_avg),
color = "white", size = 3) +
geom_point(aes(y = moving_avg, color = "Média móvel (7 dias)")) +
geom_line(aes(y = moving_avg, color = "Média móvel (7 dias)"))+
scale_color_manual(values = c("orange", "darkblue")) +
theme_ipsum() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45),
legend.title = element_blank()) +
labs(title = paste("Total de óbitos por COVID-19 \nno Brasil:", total_deaths_BR),
subtitle = "",
caption = paste("IRRD/PE. Fonte: https://covid.saude.gov.br/.\n Dados atualizados em ",
format(as.Date(today()), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()-1))) +
xlab("") +
ylab("Óbitos diários")
deaths_BR_movavg
# Salvando o html
library(plotly)
deaths_BR_movavgPlot <- ggplotly(deaths_BR_movavg, width = 3, height = 6)
deaths_BR_movavgPlot
htmlwidgets::saveWidget(deaths_BR_movavgPlot,
paste(path, "deaths_BR_movavg.html"))
