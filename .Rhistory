aes(x = data_atend, y = freq, fill = resultado)) +
geom_bar(stat = "identity", alpha = 0.9) +
xlab("Data de atendimento") +
ylab("Quantidade de testes diários") +
scale_fill_manual(values = c("#E7B800", "#00AFBB", "#52854C","#FC4E07"))+
theme_light() +
theme(legend.title = element_blank(),
legend.position = "bottom",
axis.text.x = element_text(angle = 90)) +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-17", today()))) +
ggtitle("Testes diários para COVID-19 em PE\nGenomika/LIKA-UFPE") +
labs(caption = paste("IRRD/PE. Dados atualizados em", format(as.Date(today()), "%d/%m/%Y"))) +
theme(legend.title = element_blank())
plot
#==============================#
# Salvar
jpeg(paste(path, "genomika_testes.jpg", sep = ""),
width = 5, height = 4, units = 'in', res = 300)
plot
dev.off()
###################################
library('ggthemes')
library('ggthemr')
ggthemr_reset()
ggthemr("flat")
plot6 <- testes_dia2 %>%
ggplot(aes(x = data_atend, y =  resultado, fill = freq)) +
#geom_raster(color = "black") +
geom_point(size = 9, alpha = 1, shape = 22,
color = "gray") +
scale_fill_viridis_c(direction = -1)+
theme_bw()+
geom_text(aes(x = data_atend, y = resultado, label = freq), color = "black", size = 3)+
labs(x = "Data de atendimento", y = "Resultado", fill = "Quantidade \nde testes",
title = "Quantidade de testes",
subtitle = "Genomika/LIKA-UFPE",
caption = paste("IRRD. Dados atualizados em", format(as.Date(today()), "%d-%m-%Y"))) +
theme(axis.text.x = element_text(angle = 90, size = 8, face = "bold"))+
theme(axis.text = element_text(color = "dimgray", size = 10, face = "bold")) +
scale_x_date(date_labels = "%b %d", date_breaks = "1 day")
plot6
###################################
# Salvando em jpg
#path <- "/Users/edneideramalho/Google Drive/Coronavirus/IRRD/Informes e relatórios/graficos 28-04-2020/"
jpeg(paste(path, "genomika_testes_dia.jpg", sep = ""),
width = 13, height = 7, units = 'in', res = 300)
plot6
dev.off()
#=====================#
# Histograma de Idade #
#=====================#
class(genomika_df$data_nascimento)
# Código para idade
#idade = lubridate::time_length(difftime(Sys.Date(), data_de_nascimento), "years")
#lubridate::as_date(data_atualizacao)
library(lubridate)
genomika_df = genomika_df %>%
mutate(data_nasc = lubridate::as_date(data_nascimento),
idade = lubridate::time_length(difftime(Sys.Date(), data_nasc), "years"))
indices_excluir <- which(genomika_df$idade < 0)
genomika_df = genomika_df %>%
mutate(sexo2 = if_else(sexo == 0, "Masculino", "Feminino"))
# Outro
library(hrbrthemes)
genomika_df2 = genomika_df[-indices_excluir,]
histogram <- genomika_df2 %>%
ggplot(aes(x = idade, fill = sexo2)) +
geom_histogram(color="#e9ecef", alpha=0.75, position = 'identity') +
scale_fill_manual(values=c("#ffcc00", "#404080")) +
theme_ipsum() +
labs(fill="",
title = "Testes realizados pela \nGenomika/LIKA-UFPE",
subtitle = "",
caption = paste("IRRD. Dados atualizados em",
format(as.Date(today()), "%d/%m/%Y")))+
xlab("Idade") +
ylab("Frequência")
histogram
jpeg(paste(path, "genomika_testes_histogram.jpg", sep = ""),
width = 8, height = 6, units = 'in', res = 300)
histogram
dev.off()
#===============================#
# Médias móveis de óbito em PE  #
#===============================#
library(pracma) # biblioteca para calcular média móvel
library(ggplot2)
obitos_pe <- pe_mod %>%
filter(variable == "óbitos") %>%
dplyr::select(value) %>% na.omit() %>% pull()
# "s" é para média móvel simples
y <- movavg(obitos_pe, 2, "s")
y2 <- movavg(obitos_pe, 30, "s")
# Juntando numa date frame
mov_avg_death <- data.frame(obitos_pe, y, y2)
mov_avg_death <- mov_avg_death %>%
mutate(x = seq(1, dim(mov_avg_death)[1]))
ggplot(mov_avg_death) +
geom_line(aes(x = x, y = y), color = "blue") +
geom_line(aes(x = x, y = y2), color = "red") +
geom_line(aes(x = x, y = obitos_pe), color = "green")
# Média móvel para os novos óbitos
new_deaths <- obitos_pe - lag(obitos_pe, n = 1)
new_deaths = na.omit(new_deaths)
new_deaths5 <- movavg(new_deaths, 5, "s")
new_deaths7 <- movavg(new_deaths, 7, "s")
new_deathsDF <- data.frame(new_deaths, new_deaths5, new_deaths7)
new_deathsDF <- new_deathsDF %>%
mutate(x = seq(1, dim(new_deathsDF)[1]))
# Gráfico
new_deathsDF = melt(new_deathsDF, id = "x")
ggplot(new_deathsDF, aes(x = x, y = value, color = variable)) +
geom_line()
# selecionando só média móvel para 5 dias
new_deathsDF2 = new_deathsDF %>%
filter(variable == "new_deaths5") %>%
ggplot(aes(x = x, y = value)) +
geom_line() +
theme_ipsum()
novas_mortes_media_movel = new_deathsDF2 +
labs(fill="",
title = "Novas mortes no estado de PE",
subtitle = "Média móvel de 5 dias",
caption = paste("Média móvel simples. \nIRRD. Fonte: Ministério da Saúde. \nDados atualizados em",
format(as.Date(today()), "%d/%m/%Y")))+
xlab("") +
ylab("novas mortes")
novas_mortes_media_movel
# Salvando em jpeg
jpeg(paste(path, "media_movel_5_mortes_PE.jpg", sep = ""),
width = 6, height = 6, units = 'in', res = 300)
novas_mortes_media_movel
dev.off()
library(dplyr)
library(readr)
library(deSolve)
library(lubridate)
library(ggplot2)
Cov_D <- read_csv("https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-states.csv",
col_types = cols(city = col_skip(), country = col_skip()))
# Filtrando Pernambuco
pe <- Cov_D
pe <- pe %>% filter(state == "PE")
# Modelo SIR
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta * I * S/N
dI <- beta * I * S/N - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
#População de PE --     9.557.071
# Fonte: https://cidades.ibge.gov.br/brasil/pe/panorama
N <- 9557071
# Infectados -- Novos Casos
Infected <- pe %>%
pull(newCases)
# Criando um vetor de dias do mesmo comprimento que o vetor de caos
Day <- 0:(length(Infected)-1)
# Especificando valores iniciais para S, I and R
init <- c(S = N - Infected[1], I = Infected[1], R = 0)
##--Função para calcular a soma dos quadrados dos resíduos--##
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[, 3]
sum((Infected - fit)^2)
}
##--Ajustando o modelo SIR--##
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B",
lower = c(0,0), upper = c(1,1))
Opt$message ## A convergência foi atingida
##-- Parâmetros Ajustados--##
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
##-- Ajustando o modelo aos dados--##
# tempo em dias para as predições
sir_start_date <- pe$date[1]
t <- 0:as.integer(today() - ymd(sir_start_date))
# usando os valores ajustados do modelo SIR
fitted_incidence <- data.frame(ode(y = init, times = t,
func = SIR, parms = Opt_par))
# Adicionando uma coluna de data e juntando os dados observados de incidência
fitted_incidence <- fitted_incidence %>%
mutate(date = pe$date)
fitted_incidence <- fitted_incidence %>%
mutate(new_cases = pe$newCases)
library(hrbrthemes)
plot_incidencia <- fitted_incidence %>%
ggplot(aes(x = date)) +
geom_point(aes(y = new_cases, colour = 'Incidência observada')) +
geom_line(aes(y = I, colour = 'Incidência ajustada')) +
theme_ipsum() +
labs(x = "Data",
y = "Incidência",
title = "COVID-19 em Pernambuco",
subtitle = "Incidência ajustada vs. observada",
caption = " ") +
theme(legend.position = 'bottom',
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1, size = rel(0.7)),
axis.text.y = element_text(size = rel(0.7))
)
plot_incidencia
# Bibliotecas
library(tidyverse)
library(magrittr)
library(lubridate)
library(tibble)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(rvest)
library(gt)
library(deSolve)
library(EpiEstim)
library(incidence)
library(distcrete)
library(epitrix)
library(projections)
library(scales)
##--Base de dados--##
Cov_D <- read_csv("https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-states.csv",
col_types = cols(city = col_skip(), country = col_skip()))
# Filtrando Pernambuco
df <- Cov_D
pe <- filter(df, state == "PE")
# Modelo SIR
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta * I * S/N
dI <- beta * I * S/N - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
# Condições iniciais para o modelo
sir_start_date <- "2020-03-12" # data inicial (primeira obs de casos)
#População de PE -- 	9.557.071
# Fonte: https://cidades.ibge.gov.br/brasil/pe/panorama
N <- 9557071
# Infectados -- Novos Casos
Infected <- pe %>% filter(date >= ymd("2020-03-12")) %>%
pull(newCases)
# Criando um vetor de dias do mesmo comprimento que o vetor de caos
Day <- 1:(length(Infected))
# Especificando valores iniciais para S, I and R
init <- c(S = N - Infected[1], I = Infected[1], R = 0)
##--Função para calcular a soma dos quadrados dos resíduos--##
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[, 3]
sum((Infected - fit)^2)
}
##--Ajustando o modelo SIR--##
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B",
lower = c(0,0), upper = c(1,1))
Opt$message ## A convergência foi atingida
##-- Parâmetros Ajustados--##
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
##-- Ajustando o modelo aos dados--##
# tempo em dias para as predições
t <- 0:as.integer(today() - ymd(sir_start_date))
# usando os valores ajustados do modelo SIR
fitted_incidence <- data.frame(ode(y = init, times = t,
func = SIR, parms = Opt_par))
# Adicionando uma coluna de data e juntando os dados observados de incidência
fitted_incidence <- fitted_incidence %>%
mutate(date = ymd(sir_start_date) + days(t+1))
fitted_incidence <- fitted_incidence %>%
mutate(new_cases = pe$newCases)
# plot
library(hrbrthemes)
plot_incidencia <- fitted_incidence %>%
ggplot(aes(x = date)) +
geom_point(aes(y = new_cases, colour = 'Incidência observada')) +
geom_line(aes(y = new_cases, colour = 'Incidência observada')) +
geom_line(aes(y = I, colour = 'Incidência ajustada')) +
theme_ipsum() +
labs(x = "Data",
y = "Incidência",
title = "COVID-19 em Pernambuco",
subtitle = "Incidência ajustada vs. observada",
caption = " ") +
theme(legend.position = 'bottom',
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1, size = rel(0.7)),
axis.text.y = element_text(size = rel(0.7))
)
plot_incidencia
path
# Salvando na pasta de trabalho do dia
# Salvando em jpeg
jpeg(paste(path, "plot_incidencia_PE_SIR.jpg"), width = 6, height = 6, units = 'in', res = 300)
plot_incidencia
dev.off()
#===============================#
##-- Tempo maior de predição --##
#===============================#
# tempo em dias para predição
t <- 0:150
init <- c(S = N - Infected[1], I = Infected[1], R = 0)
# Tomando os valores ajustados para o modelo SIR
fitted_incidence2 <- data.frame(ode(y = init, times = t,
func = SIR, parms = Opt_par))
# Adicionando uma coluna de Data e juntando aos dados de incidência
fitted_incidence2 <- fitted_incidence2 %>%
mutate(date = ymd(sir_start_date) + days(t+1))
fitted_incidence2 <- fitted_incidence2 %>%
mutate(new_cases = c(pe$newCases, rep(NA, length(t)- length(pe$newCases))))
##-- Gráfico -- ##
plot_incidence2 <- fitted_incidence2 %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I, colour = 'Incidência ajustada')) +
geom_point(aes(y = new_cases, colour = 'Incidência observada')) +
theme_ipsum() +
labs(x = "Data",
y = "Incidência",
title = "COVID-19 em Pernambuco",
subtitle = "Incidência ajustada vs. observada",
caption = " ") +
theme(legend.position = 'bottom',
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1, size = rel(0.7)),
axis.text.y = element_text(size = rel(0.7))
) +
scale_x_date(date_breaks = "5 days", date_labels = "%b %d")
# Salvando em jpeg
jpeg("plot_incidencia_PE_SIR2.jpg", width = 6, height = 6, units = 'in', res = 300)
plot_incidence2
dev.off()
# Rodando o modelo com medidas de controle
# Modelo SIR
SIR2 <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta * I * S/N
dI <- beta * I * S/N - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
# Rodando o modelo com medidas de controle
# Modelo SIR
SIR2 <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta * I * S/N
dI <- beta * I * S/N - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
# Simulando com beta = 0.8
# tempo em dias para predição
t <- 0:400
init <- c(S = N - Infected[1], I = Infected[1], R = 0)
# Tomando os valores ajustados para o modelo SIR
out1 <- data.frame(ode(y = init, times = t, func = SIR2, parms = Opt_par))
out1 <- out1 %>%
mutate(date = ymd(sir_start_date) + days(t+1))
out1 <- out1 %>%
mutate(new_cases = c(pe$newCases, rep(NA, length(t)- length(pe$newCases))))
# Com controle
k <- 0.9 # redução na taxa de infecção
out2 <- data.frame(ode(y = init,
times = t,
func = SIR2,
parms = c(k*Opt_par[1], Opt_par[2])))
# Com controle
k3 <- 0.8 # redução na taxa de infecção
out3 <- data.frame(ode(y = init,
times = t,
func = SIR2,
parms = c(k3*Opt_par[1], Opt_par[2])))
# Juntando em uma base
comparacao <- data.frame(
datas  = out1$date,
SemControle = out1$I,
ComControle = out2$I,
ComControle2 = out3$I,
Casos = out1$
)
# Tomando os valores ajustados para o modelo SIR
out1 <- data.frame(ode(y = init, times = t, func = SIR2, parms = Opt_par))
out1 <- out1 %>%
mutate(date = ymd(sir_start_date) + days(t+1))
out1 <- out1 %>%
mutate(new_cases = c(pe$newCases, rep(NA, length(t)- length(pe$newCases))))
# Com controle
k <- 0.9 # redução na taxa de infecção
out2 <- data.frame(ode(y = init,
times = t,
func = SIR2,
parms = c(k*Opt_par[1], Opt_par[2])))
# Com controle
k3 <- 0.8 # redução na taxa de infecção
out3 <- data.frame(ode(y = init,
times = t,
func = SIR2,
parms = c(k3*Opt_par[1], Opt_par[2])))
# Juntando em uma base
comparacao <- data.frame(
datas  = out1$date,
SemControle = out1$I,
ComControle = out2$I,
ComControle2 = out3$I,
Casos = out1$
)
# Grafico
plot_comparacao <- comparacao %>%
ggplot(aes(x = datas)) +
geom_line(aes(y = SemControle, colour = "Sem isolamento")) +
geom_line(aes(y = ComControle, colour = "Com isolamento")) +
geom_point(aes(y = Casos, colour = "Incidência observada")) +
labs(x = "Data",
y = "Número de pessoas infectadas por dia",
title = "COVID-19 em Pernambuco",
subtitle = " ") +
theme(legend.position = 'bottom',
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1, size = rel(0.7)),
axis.text.y = element_text(size = rel(0.7))
) +
scale_x_date(date_breaks = "15 days", date_labels = "%b %d")
# Juntando em uma base
comparacao <- data.frame(
datas  = out1$date,
SemControle = out1$I,
ComControle = out2$I,
ComControle2 = out3$I,
Casos = out1$I
)
# Grafico
plot_comparacao <- comparacao %>%
ggplot(aes(x = datas)) +
geom_line(aes(y = SemControle, colour = "Sem isolamento")) +
geom_line(aes(y = ComControle, colour = "Com isolamento")) +
geom_point(aes(y = Casos, colour = "Incidência observada")) +
labs(x = "Data",
y = "Número de pessoas infectadas por dia",
title = "COVID-19 em Pernambuco",
subtitle = " ") +
theme(legend.position = 'bottom',
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1, size = rel(0.7)),
axis.text.y = element_text(size = rel(0.7))
) +
scale_x_date(date_breaks = "15 days", date_labels = "%b %d")
jpeg("comparacao_incidencia.jpg", width = 6, height = 6, unit = 'in', res = 300)
plot_comparacao
dev.off()
# Grafico
plot_comparacao <- comparacao %>%
ggplot(aes(x = datas)) +
geom_line(aes(y = SemControle, colour = "Sem isolamento")) +
geom_line(aes(y = ComControle, colour = "Com isolamento")) +
geom_point(aes(y = Casos, colour = "Incidência observada")) +
theme_ipsum() +
labs(x = "Data",
y = "Número de pessoas infectadas por dia",
title = "COVID-19 em Pernambuco",
subtitle = " ") +
theme(legend.position = 'bottom',
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1, size = rel(0.7)),
axis.text.y = element_text(size = rel(0.7))
) +
scale_x_date(date_breaks = "15 days", date_labels = "%b %d")
jpeg("comparacao_incidencia.jpg", width = 6, height = 6, unit = 'in', res = 300)
plot_comparacao
dev.off()
# Grafico
plot_comparacao <- comparacao %>%
ggplot(aes(x = datas)) +
geom_line(aes(y = SemControle, colour = "Sem isolamento")) +
geom_line(aes(y = ComControle, colour = "Com isolamento")) +
#geom_point(aes(y = Casos, colour = "Incidência observada")) +
theme_ipsum() +
labs(x = "Data",
y = "Número de pessoas infectadas por dia",
title = "COVID-19 em Pernambuco",
subtitle = " ") +
theme(legend.position = 'bottom',
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1, size = rel(0.7)),
axis.text.y = element_text(size = rel(0.7))
) +
scale_x_date(date_breaks = "15 days", date_labels = "%b %d")
jpeg("comparacao_incidencia.jpg", width = 6, height = 6, unit = 'in', res = 300)
plot_comparacao
dev.off()
