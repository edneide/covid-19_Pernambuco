geom_bar(stat="identity", color = "white", fill = "blue", alpha = 0.9) +
geom_text(aes(label=new.deaths), position=position_dodge(width=0.9), vjust=-0.25)+
dark_theme_gray() +
theme(axis.text.x = element_text(angle = 90)) +
scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-20", today()))) +
labs(title = "Número de novos óbitos COVID-19",
subtitle = "Pernambuco",
caption = paste("IRRD/PE. Fonte: Secretaria de Saúde de Pernambuco\n Dados atualizados em ", format(as.Date(today()), "%d/%m/%Y"))) +
xlab("Data de notificação") + ylab("Novos óbitos")
plot_newdeaths
plot_deaths <- ggplot(pe, aes(x = date, y = deaths, group = state)) +
geom_bar(stat="identity", color = "white", fill = "blue", alpha = 0.9) +
geom_text(aes(label=deaths), position=position_dodge(width=0.9), vjust=-0.25)+
dark_theme_gray() +
theme(axis.text.x = element_text(angle = 90)) +
scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-20", today()))) +
labs(title = "Óbitos COVID-19",
subtitle = "Pernambuco",
caption = paste("IRRD/PE. Fonte: Secretaria de Saúde de Pernambuco\n Dados atualizados em ", format(as.Date(today()), "%d/%m/%Y"))) +
xlab("Data de notificação") + ylab("Óbitos acumulados")
plot_deaths
jpeg(paste(path, "novos_casos_pe.jpg"),
width = 6, height = 5, units = 'in', res = 300)
plot_newcases
dev.off()
jpeg(paste(path, "novos_obitos_pe.jpg"),
width = 6, height = 5, units = 'in', res = 300)
plot_newdeaths
dev.off()
library(dplyr)
# Bases por estado
sp <- filter(df, state == "SP")
rj <- filter(df, state == "RJ")
dist_federal <- filter(df, state == "DF")
ce <- filter(df, state == "CE")
rs <- filter(df, state == "RS")
estados <- c("São Paulo", "Rio de Janeiro" , "Distrito Federal","Ceará","Rio Grande do Sul", "Pernambuco")
library(dplyr)
# Juntando as bases
estados_data <- rbind(sp, pe[,-6], rj, dist_federal, ce, rs)
estados_data$state <- factor(estados_data$state, levels = c("SP", "RJ", "CE", "DF", "RS", "PE"))
library(ggplot2)
plot_comp <- ggplot(estados_data, aes(x = date, y = totalCases, group = state)) +
geom_line(aes(color = state), size = 1) +
geom_point(aes(color = state), size = 1) +
xlab("") +
labs(title = "Casos confirmados COVID-19",
subtitle = "Alguns estados do Brasil",
caption = paste("IRRD/PE. Fonte: Plataforma IVIS. \nDados atualizados em ",
format(as.Date(today()), "%d/%m/%Y"))) +
theme(legend.title=element_blank())+
theme(axis.text.x = element_text(angle = 90)) +
scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-12", today())))
plot_comp
jpeg(paste(path, "covid-19_comparativo_brasil.jpg", sep = ""),
width = 5, height = 4, units = 'in', res = 300)
plot_comp +
scale_y_continuous(breaks = seq(0,max(estados_data$totalCases),1000)) +
ylab("Casos confirmados\n(escala linear)")
dev.off()
jpeg(paste(path, "covid-19_comparativo_brasil_escala_log.jpg", sep = ""),
width = 5, height = 4, units = 'in', res = 300)
plot_comp + scale_y_continuous(trans = 'log10') +
ylab("Casos confirmados\n(escala log)")
dev.off()
library(readr)
library(dplyr)
library(tidyverse)
library(reshape2)
confirmedCases= read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv')
deathCases= read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv')
recoveredCases= read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv')
#convert data sets into columns and remove unwanted columns
confirmedCases<-confirmedCases%>%select(-c(Lat,Long))%>%melt(id=c('Country/Region','Province/State'))
confirmedCases<-confirmedCases%>%group_by(`Country/Region`,variable)%>%summarise(Confirmed=sum(value))
deathCases<-deathCases%>%select(-c(Lat,Long))%>%melt(id=c('Country/Region','Province/State'))
deathCases<-deathCases%>%group_by(`Country/Region`,variable)%>%summarise(Deaths=sum(value))
recoveredCases<-recoveredCases%>%select(-c(Lat,Long))%>%melt(id=c('Country/Region','Province/State'))
recoveredCases<-recoveredCases%>%group_by(`Country/Region`,variable)%>%summarise(Recovered=sum(value))
# rename table columns
colnames(confirmedCases)<-c("Country","Date","Confirmed")
colnames(deathCases)<-c("Country","Date","Death")
colnames(recoveredCases)<-c("Country","Date","Recovered")
# merge all atbles together
mergedCases<-merge(confirmedCases,deathCases, by.y=c("Country","Date"))
mergedCases<-merge(mergedCases,recoveredCases, by.y=c("Country","Date"))
brasil <- filter(mergedCases, Country == "Brazil")
brasil1 <- brasil
#brasil1[69,][c(3,4)] <- c(4630, 163)
brasil1 = brasil1 %>%
mutate(date2 = as.POSIXct(as.character(Date), format = "%m/%d/%y"),
date3 = as.Date(date2))
library(dplyr)
brasil1 = arrange(brasil1, Date)
brasil1$pais = rep("Brasil", dim(brasil1)[1])
library(ggplot2)
p <- ggplot(brasil1, aes(x = date3, y = Confirmed, group = pais)) +
geom_line(aes(color = pais), size = 1) +
scale_color_manual(values = c("#ff5050")) +
geom_point(aes(color = pais), size = 1.5) +
theme_light() +
theme(axis.text.x = element_text(angle = 90)) #+
#scale_y_continuous(breaks = seq(0, 1200, 100))
brasil_plot <- p + scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-08", today()))) +
xlab("") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Casos confirmados COVID-19",
subtitle = "Brasil",
caption = paste("IRRD/PE. Fonte: CIEVS/NUVRESP/SEVS/SES.
\n Dados atualizados em ", format(today(), "%d/%m/%Y.")))
brasil_plot
jpeg(paste(path, "covid-19_confirmados_brasil.jpg"),
width = 6, height = 5, units = 'in', res = 300)
brasil_plot + scale_y_continuous(breaks = seq(0,max(brasil1$Confirmed),2000)) +
ylab("Total de casos confirmados\n(escala linear)")
dev.off()
jpeg(paste(path, "covid-19_confirmados_brasil_escala_log.jpg"),
width = 6, height = 5, units = 'in', res = 300)
brasil_plot  + scale_y_continuous(trans = 'log10') +
ylab("Total de casos confirmados\n(escala log)")
dev.off()
#brasil1$pais = rep("Brasil", 70)
library(ggplot2)
p <- ggplot(brasil1, aes(x = date3, y = Death, group = pais)) +
geom_line(aes(color = pais), size = 1) +
scale_color_manual(values = c("#000000")) +
geom_point(aes(color = pais), size = 1.5) +
theme_light() +
theme(axis.text.x = element_text(angle = 90)) #+
#scale_y_continuous(breaks = seq(0, 1200, 100))
brasil_obito <- p + scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-08", today()))) +
xlab("") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Óbitos COVID-19 no Brasil",
caption = paste("IRRD/PE. Fonte: CIEVS/NUVRESP/SEVS/SES.
\n Dados atualizados em ", format(today(), "%d/%m/%Y.")))
brasil_obito
jpeg(paste(path, "covid-19_obitos_brasil.jpg", sep = ""),
width = 6, height = 5, units = 'in', res = 300)
brasil_obito +
scale_y_continuous(breaks = seq(0,max(brasil1$Death), 50)) +
ylab("Total de óbitos\n(escala linear)")
dev.off()
jpeg(paste(path, "covid-19_obitos_brasil_log.jpg", sep = ""),
width = 6, height = 5, units = 'in', res = 300)
brasil_obito +
scale_y_continuous(trans = 'log10') +
ylab("Total de óbitos\n(escala log)")
dev.off()
paises <- c("China", "Italy", "Iran", "Spain", "Germany", "US", "France", "Brazil")
countries <- filter(mergedCases, Country %in%  paises)
# Começando em 100 casos
countries2 <- filter(countries, Confirmed >=100)
# Reorganizando as datas
countries2 = countries2 %>%
mutate(date2 = as.POSIXct(as.character(Date), format = "%m/%d/%y"),
date3 = as.Date(date2))
# Criando uma variável de tempo em dias a partir do 100º caso
lista_paises <- list(NULL)
for(i in 1:length(paises)){
df <- filter(countries2, Country == paises[i])
t0 <- (sort(df$date3))[1]
df <- mutate(df, Time = as.numeric(date3 - t0))
lista_paises[[i]] <- df
}
names(lista_paises) <- paises
# Juntando numa única base de dados
paises100casos <- do.call(rbind, lista_paises)
# Colocando o nome dos países em ordem
class(paises100casos$Country)
paises100casos$Country2 = factor(paises100casos$Country,
levels = paises)
# Colocando o nome dos países em português
paises100casos <- paises100casos %>%
mutate(Países = if_else(Country == "Italy", "Itália",
if_else(Country == "Iran", "Irã",
if_else(Country == "Spain", "Espanha",
if_else(Country == "Germany",
"Alemanha",
if_else(Country == "Brazil", "Brasil", if_else(Country == "US", "Estados Unidos", if_else(Country == "France", "França", as.character(Country)))))))))
library(ggplot2)
p <- ggplot(paises100casos, aes(x = Time, y = Confirmed, group = Países)) +
geom_line(aes(color = Países)) +
geom_point(aes(color = Países)) +
xlab("Número de dias a partir do 100º caso") +
scale_x_continuous(breaks = seq(0,70,by=10)) +
labs(title = "COVID-19: Número acumulado de casos",
caption = paste("IRRD/PE. Fonte:CSSE John Hopkins University.\nDados atualizados em ", format(today(), "%d/%m/%Y"))) +
theme(legend.title = element_blank())
p + theme_minimal()
paises <- c("China", "Italy", "Iran", "Spain", "Germany", "US", "France", "Brazil")
countries <- filter(mergedCases, Country %in%  paises)
# Começando em 100 casos
countries2 <- filter(countries, Confirmed >=100)
# Reorganizando as datas
countries2 = countries2 %>%
mutate(date2 = as.POSIXct(as.character(Date), format = "%m/%d/%y"),
date3 = as.Date(date2))
# Criando uma variável de tempo em dias a partir do 100º caso
lista_paises <- list(NULL)
for(i in 1:length(paises)){
df <- filter(countries2, Country == paises[i])
t0 <- (sort(df$date3))[1]
df <- mutate(df, Time = as.numeric(date3 - t0))
lista_paises[[i]] <- df
}
names(lista_paises) <- paises
# Juntando numa única base de dados
paises100casos <- do.call(rbind, lista_paises)
# Colocando o nome dos países em ordem
class(paises100casos$Country)
paises100casos$Country2 = factor(paises100casos$Country,
levels = paises)
# Colocando o nome dos países em português
paises100casos <- paises100casos %>%
mutate(Países = if_else(Country == "Italy", "Itália",
if_else(Country == "Iran", "Irã",
if_else(Country == "Spain", "Espanha",
if_else(Country == "Germany",
"Alemanha",
if_else(Country == "Brazil", "Brasil", if_else(Country == "US", "Estados Unidos", if_else(Country == "France", "França", as.character(Country)))))))))
library(ggplot2)
p <- ggplot(paises100casos, aes(x = Time, y = Confirmed, group = Países)) +
geom_line(aes(color = Países)) +
geom_point(aes(color = Países)) +
xlab("Número de dias a partir do 100º caso") +
scale_x_continuous(breaks = seq(0,90,by=10)) +
labs(title = "COVID-19: Número acumulado de casos",
caption = paste("IRRD/PE. Fonte:CSSE John Hopkins University.\nDados atualizados em ", format(today(), "%d/%m/%Y"))) +
theme(legend.title = element_blank())
p + theme_minimal()
paises <- c("China", "Italy", "Iran", "Spain", "Germany", "US", "France", "Brazil")
countries <- filter(mergedCases, Country %in%  paises)
# Começando em 100 casos
countries2 <- filter(countries, Confirmed >=100)
# Reorganizando as datas
countries2 = countries2 %>%
mutate(date2 = as.POSIXct(as.character(Date), format = "%m/%d/%y"),
date3 = as.Date(date2))
# Criando uma variável de tempo em dias a partir do 100º caso
lista_paises <- list(NULL)
for(i in 1:length(paises)){
df <- filter(countries2, Country == paises[i])
t0 <- (sort(df$date3))[1]
df <- mutate(df, Time = as.numeric(date3 - t0))
lista_paises[[i]] <- df
}
names(lista_paises) <- paises
# Juntando numa única base de dados
paises100casos <- do.call(rbind, lista_paises)
# Colocando o nome dos países em ordem
class(paises100casos$Country)
paises100casos$Country2 = factor(paises100casos$Country,
levels = paises)
# Colocando o nome dos países em português
paises100casos <- paises100casos %>%
mutate(Países = if_else(Country == "Italy", "Itália",
if_else(Country == "Iran", "Irã",
if_else(Country == "Spain", "Espanha",
if_else(Country == "Germany",
"Alemanha",
if_else(Country == "Brazil", "Brasil", if_else(Country == "US", "Estados Unidos", if_else(Country == "France", "França", as.character(Country)))))))))
library(ggplot2)
p <- ggplot(paises100casos, aes(x = Time, y = Confirmed, group = Países)) +
geom_line(aes(color = Países)) +
geom_point(aes(color = Países)) +
xlab("Número de dias a partir do 100º caso") +
scale_x_continuous(breaks = seq(0,100,by=10)) +
labs(title = "COVID-19: Número acumulado de casos",
caption = paste("IRRD/PE. Fonte:CSSE John Hopkins University.\nDados atualizados em ", format(today(), "%d/%m/%Y"))) +
theme(legend.title = element_blank())
p + theme_minimal()
library(ggplot2)
p <- ggplot(paises100casos, aes(x = Time, y = Confirmed, group = Países)) +
geom_line(aes(color = Países)) +
geom_point(aes(color = Países)) +
xlab("Número de dias a partir do 100º caso") +
scale_x_continuous(breaks = seq(0,100,by=10)) +
labs(title = "COVID-19: Número acumulado de casos",
caption = paste("IRRD/PE. Fonte:CSSE John Hopkins University.\nDados atualizados em ", format(today(), "%d/%m/%Y"))) +
theme(legend.title = element_blank())
p + theme_minimal()
jpeg(paste(path, "comparacao_brasil_paises.jpg"),
width = 6, height = 5, units = 'in', res = 300)
p + theme_minimal() +
ylab("Total de casos confirmados\n(escala linear)")
dev.off()
p + theme_minimal() +
scale_y_log10()
jpeg(paste(path,"comparacao_brasil_paises_escala_log.jpg"),
width = 6, height = 5, units = 'in', res = 300)
p + theme_minimal() +
scale_y_log10()  + ylab("Total de casos confirmados\n(escala log)")
dev.off()
library(ggrepel)
plot_casesDeaths <- ggplot(pe_mod, aes(x = date, y = value, colour = variable)) +
geom_line() + geom_point(position = "dodge") +
scale_color_manual(values=c("blue", "red")) +
theme_light() +
geom_text(aes(label = value), colour = "black", hjust = 0.6, vjust = -.9, size = 2,
parse = TRUE)
#geom_label_repel(aes(label = value),
#  box.padding   = 0.35,
# point.padding = 0.5,
#  segment.color = 'grey50', size = 2) #+
#geom_text(aes(label = value), colour = "black", size = 3,
#  position = position_dodge(0.9))
mortes_casos = plot_casesDeaths +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Casos confirmados e óbitos COVID-19",
subtitle = "Pernambuco",
caption = paste("IRRD/PE. Fonte: Secretaria de Saúde de Pernambuco\n Dados atualizados em ", format(as.Date(today()), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()))) +
scale_y_continuous(breaks = seq(0, 450, 50)) +
xlab("Data de notificação a partir da 1ª morte") + ylab("Quantidade de ocorrências") +
theme(legend.title = element_blank(),
legend.position = "bottom")
mortes_casos
# linear
jpeg(paste(path, "covid-19_pernambuco_confirmados.jpg", sep = ""),
width = 4, height = 4, units = 'in', res = 300)
p +
scale_y_continuous(breaks = seq(0,max(pe$totalCases),100)) +
ylab("Total de casos confirmados\n(escala linear)")
dev.off()
# log
jpeg(paste(path, "covid-19_pernambuco_confirmados_escala_log.jpg", sep = ""),
width = 4, height = 4, units = 'in', res = 300)
p + scale_y_continuous(trans = 'log10') +
ylab("Total de casos confirmados\n(escala log)")
dev.off()
library(ggrepel)
plot_casesDeaths <- ggplot(pe_mod, aes(x = date, y = value, colour = variable)) +
geom_line() + geom_point(position = "dodge") +
scale_color_manual(values=c("blue", "red")) +
theme_light() +
geom_text(aes(label = value), colour = "black", hjust = 0.6, vjust = -.9, size = 2,
parse = TRUE)
#geom_label_repel(aes(label = value),
#  box.padding   = 0.35,
# point.padding = 0.5,
#  segment.color = 'grey50', size = 2) #+
#geom_text(aes(label = value), colour = "black", size = 3,
#  position = position_dodge(0.9))
mortes_casos = plot_casesDeaths +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Casos confirmados e óbitos COVID-19",
subtitle = "Pernambuco",
caption = paste("IRRD/PE. Fonte: Secretaria de Saúde de Pernambuco\n Dados atualizados em ", format(as.Date(today()), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()))) +
scale_y_continuous(breaks = seq(0, max(pe_mod$value), 50)) +
xlab("Data de notificação a partir da 1ª morte") + ylab("Quantidade de ocorrências") +
theme(legend.title = element_blank(),
legend.position = "bottom")
max(pe_mod$value)
library(ggrepel)
plot_casesDeaths <- ggplot(pe_mod, aes(x = date, y = value, colour = variable)) +
geom_line() + geom_point(position = "dodge") +
scale_color_manual(values=c("blue", "red")) +
theme_light() +
geom_text(aes(label = value), colour = "black", hjust = 0.6, vjust = -.9, size = 2,
parse = TRUE)
#geom_label_repel(aes(label = value),
#  box.padding   = 0.35,
# point.padding = 0.5,
#  segment.color = 'grey50', size = 2) #+
#geom_text(aes(label = value), colour = "black", size = 3,
#  position = position_dodge(0.9))
mortes_casos = plot_casesDeaths +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Casos confirmados e óbitos COVID-19",
subtitle = "Pernambuco",
caption = paste("IRRD/PE. Fonte: Secretaria de Saúde de Pernambuco\n Dados atualizados em ", format(as.Date(today()), "%d/%m/%Y"))) +
scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-25", today()))) +
scale_y_continuous(breaks = seq(0, 600, 50)) +
xlab("Data de notificação a partir da 1ª morte") + ylab("Quantidade de ocorrências") +
theme(legend.title = element_blank(),
legend.position = "bottom")
mortes_casos
# linear
jpeg(paste(path, "covid-19_pernambuco_confirmados.jpg", sep = ""),
width = 4, height = 4, units = 'in', res = 300)
p +
scale_y_continuous(breaks = seq(0,max(pe$totalCases),100)) +
ylab("Total de casos confirmados\n(escala linear)")
dev.off()
# log
jpeg(paste(path, "covid-19_pernambuco_confirmados_escala_log.jpg", sep = ""),
width = 4, height = 4, units = 'in', res = 300)
p + scale_y_continuous(trans = 'log10') +
ylab("Total de casos confirmados\n(escala log)")
dev.off()
# mortes/casos
jpeg(paste(path, "mortes_casos_pe.jpg", sep = ""),
width = 6, height = 5, units = 'in', res = 300)
mortes_casos
dev.off()
library(reticulate) #para rodar códigos em Python
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(plotly)
# Local da versão do Python a ser utilizada
use_python('/opt/anaconda3/bin/python', required = TRUE)
py_run_file("Ricci.py")
# Carregando os csv's gerados
ricci_mundo <- read_csv("forman_ricci_mundial.csv")
ricci_brasil <- read_csv("forman_ricci_brasil.csv")
### Mudando o formato das datas
ricci_brasil$periodo = as.Date(ricci_brasil$periodo, format = "%d %b")
setwd("~/Documents/GitHub/covid-19_Pernambuco/curvatura_ricci")
library(reticulate) #para rodar códigos em Python
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(plotly)
# Local da versão do Python a ser utilizada
use_python('/opt/anaconda3/bin/python', required = TRUE)
py_run_file("Ricci.py")
# Carregando os csv's gerados
ricci_mundo <- read_csv("forman_ricci_mundial.csv")
ricci_brasil <- read_csv("forman_ricci_brasil.csv")
### Mudando o formato das datas
ricci_brasil$periodo = as.Date(ricci_brasil$periodo, format = "%d %b")
class(ricci_brasil$periodo)
write.csv(ricci_brasil, "forman_ricci_brasil.csv")
ricci_mundo$periodo = as.Date(ricci_mundo$periodo, format = "%d %b")
class(ricci_mundo$periodo)
write.csv(ricci_mundo, "forman_ricci_mundial.csv")
library(reticulate) #para rodar códigos em Python
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(plotly)
use_python('/opt/anaconda3/bin/python', required = TRUE)
#py_install("orca")
# Rodando
# Importante: mudar o diretório para onde se encontra o arquivo!
py_run_file("Fitting_curvature_.py")
# Carregando os csv's gerados
Casos_confirmados_Brazil_Fitting <- read_csv("Casos_confirmados_Brazil_Fitting.csv")
Casos_confirmados_Brazil_Fitting$Data =
as.Date.character(Casos_confirmados_Brazil_Fitting$Data, format = "%d %b")
class(Casos_confirmados_Brazil_Fitting$Data)
write.csv(Casos_confirmados_Brazil_Fitting,
"Casos_confirmados_Brazil_Fitting.csv")
# Pernambuco
Casos_confirmados_Pernambuco_Fitting <- read_csv("Casos_confirmados_Pernambuco_Fitting.csv")
Casos_confirmados_Pernambuco_Fitting$Data =
as.Date.character(Casos_confirmados_Pernambuco_Fitting$Data, format = "%d %b")
class(Casos_confirmados_Pernambuco_Fitting$Data)
write.csv(Casos_confirmados_Pernambuco_Fitting,
"Casos_confirmados_Pernambuco_Fitting.csv")
setwd("~/Documents/GitHub/covid-19_Pernambuco/predicoes")
library(reticulate) #para rodar códigos em Python
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(plotly)
use_python('/opt/anaconda3/bin/python', required = TRUE)
#py_install("orca")
# Rodando
# Importante: mudar o diretório para onde se encontra o arquivo!
py_run_file("Fitting_curvature_.py")
# Carregando os csv's gerados
Casos_confirmados_Brazil_Fitting <- read_csv("Casos_confirmados_Brazil_Fitting.csv")
Casos_confirmados_Brazil_Fitting$Data =
as.Date.character(Casos_confirmados_Brazil_Fitting$Data, format = "%d %b")
class(Casos_confirmados_Brazil_Fitting$Data)
write.csv(Casos_confirmados_Brazil_Fitting,
"Casos_confirmados_Brazil_Fitting.csv")
# Pernambuco
Casos_confirmados_Pernambuco_Fitting <- read_csv("Casos_confirmados_Pernambuco_Fitting.csv")
Casos_confirmados_Pernambuco_Fitting$Data =
as.Date.character(Casos_confirmados_Pernambuco_Fitting$Data, format = "%d %b")
class(Casos_confirmados_Pernambuco_Fitting$Data)
write.csv(Casos_confirmados_Pernambuco_Fitting,
"Casos_confirmados_Pernambuco_Fitting.csv")
setwd("~/Documents/GitHub/covid-19_Pernambuco/curvatura_ricci")
library(reticulate) #para rodar códigos em Python
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(plotly)
# Local da versão do Python a ser utilizada
use_python('/opt/anaconda3/bin/python', required = TRUE)
py_run_file("Ricci.py")
# Carregando os csv's gerados
ricci_mundo <- read_csv("forman_ricci_mundial.csv")
ricci_brasil <- read_csv("forman_ricci_brasil.csv")
### Mudando o formato das datas
ricci_brasil$periodo = as.Date(ricci_brasil$periodo, format = "%d %b")
class(ricci_brasil$periodo)
write.csv(ricci_brasil, "forman_ricci_brasil.csv")
ricci_mundo$periodo = as.Date(ricci_mundo$periodo, format = "%d %b")
class(ricci_mundo$periodo)
write.csv(ricci_mundo, "forman_ricci_mundial.csv")
