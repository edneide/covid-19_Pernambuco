brasil_plot <- p + scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-08", today()))) +
xlab("") + ylab("Total de casos confirmados") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Casos confirmados COVID-19",
subtitle = "Brasil",
caption = paste("IRRD/PE. Fonte: CIEVS/NUVRESP/SEVS/SES.
\n Dados atualizados em ", format(today(), "%d/%m/%Y.")))
brasil_plot
jpeg("covid-19_confirmados_brasil_31-03-2020.jpg",
width = 4, height = 4, units = 'in', res = 300)
brasil_plot +
ylab("Total de casos confirmados\n(escala linear)")
dev.off()
jpeg(paste(path, "covid-19_confirmados_brasil_31-03-2020.jpg"),
width = 4, height = 4, units = 'in', res = 300)
brasil_plot +
ylab("Total de casos confirmados\n(escala linear)")
dev.off()
jpeg(paste(path, "covid-19_confirmados_brasil_escala_log30-03-2020.jpg"),
width = 4, height = 4, units = 'in', res = 300)
brasil_plot  + scale_y_continuous(trans = 'log10') +
ylab("Total de casos confirmados\n(escala log)")
dev.off()
#brasil1$pais = rep("Brasil", 70)
library(ggplot2)
p <- ggplot(brasil1, aes(x = date3, y = Death, group = pais)) +
geom_line(aes(color = pais), size = 1) +
scale_color_manual(values = c("#000000")) +
geom_point(aes(color = pais), size = 1.5) +
theme_light() +
theme(axis.text.x = element_text(angle = 30)) #+
#scale_y_continuous(breaks = seq(0, 1200, 100))
brasil_obito <- p + scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-08", today()))) +
xlab("") + ylab("Total de óbitos") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Óbitos COVID-19 no Brasil",
caption = paste("IRRD/PE. Fonte: CIEVS/NUVRESP/SEVS/SES.
\n Dados atualizados em 01/04/2020.", format(today(), "%d/%m/%Y.")))
brasil_obito + scale_y_continuous(breaks = seq(0,max(brasil1$Death), 20))
#brasil1$pais = rep("Brasil", 70)
library(ggplot2)
p <- ggplot(brasil1, aes(x = date3, y = Death, group = pais)) +
geom_line(aes(color = pais), size = 1) +
scale_color_manual(values = c("#000000")) +
geom_point(aes(color = pais), size = 1.5) +
theme_light() +
theme(axis.text.x = element_text(angle = 30)) #+
#scale_y_continuous(breaks = seq(0, 1200, 100))
brasil_obito <- p + scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-08", today()))) +
xlab("") + ylab("Total de óbitos") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Óbitos COVID-19 no Brasil",
caption = paste("IRRD/PE. Fonte: CIEVS/NUVRESP/SEVS/SES.
\n Dados atualizados em 01/04/2020.", format(today(), "%d/%m/%Y.")))
brasil_obito + scale_y_continuous(breaks = seq(0,max(brasil1$Death), 50))
#brasil1$pais = rep("Brasil", 70)
library(ggplot2)
p <- ggplot(brasil1, aes(x = date3, y = Death, group = pais)) +
geom_line(aes(color = pais), size = 1) +
scale_color_manual(values = c("#000000")) +
geom_point(aes(color = pais), size = 1.5) +
theme_light() +
theme(axis.text.x = element_text(angle = 90)) #+
#scale_y_continuous(breaks = seq(0, 1200, 100))
brasil_obito <- p + scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-08", today()))) +
xlab("") + ylab("Total de óbitos") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Óbitos COVID-19 no Brasil",
caption = paste("IRRD/PE. Fonte: CIEVS/NUVRESP/SEVS/SES.
\n Dados atualizados em 01/04/2020.", format(today(), "%d/%m/%Y.")))
brasil_obito + scale_y_continuous(breaks = seq(0,max(brasil1$Death), 50))
#brasil1$pais = rep("Brasil", 70)
library(ggplot2)
p <- ggplot(brasil1, aes(x = date3, y = Death, group = pais)) +
geom_line(aes(color = pais), size = 1) +
scale_color_manual(values = c("#000000")) +
geom_point(aes(color = pais), size = 1.5) +
theme_light() +
theme(axis.text.x = element_text(angle = 90)) #+
#scale_y_continuous(breaks = seq(0, 1200, 100))
brasil_obito <- p + scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-08", today()))) +
xlab("") + ylab("Total de óbitos") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Óbitos COVID-19 no Brasil",
caption = paste("IRRD/PE. Fonte: CIEVS/NUVRESP/SEVS/SES.
\n Dados atualizados em ", format(today(), "%d/%m/%Y.")))
brasil_obito + scale_y_continuous(breaks = seq(0,max(brasil1$Death), 50))
#brasil1$pais = rep("Brasil", 70)
library(ggplot2)
p <- ggplot(brasil1, aes(x = date3, y = Death, group = pais)) +
geom_line(aes(color = pais), size = 1) +
scale_color_manual(values = c("#000000")) +
geom_point(aes(color = pais), size = 1.5) +
theme_light() +
theme(axis.text.x = element_text(angle = 90)) #+
#scale_y_continuous(breaks = seq(0, 1200, 100))
brasil_obito <- p + scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-08", today()))) +
xlab("") + ylab("Total de óbitos") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Óbitos COVID-19 no Brasil",
caption = paste("IRRD/PE. Fonte: CIEVS/NUVRESP/SEVS/SES.
\n Dados atualizados em ", format(today(), "%d/%m/%Y.")))
brasil_obito
brasil_obito +
scale_y_continuous(breaks = seq(0,max(brasil1$Death), 50)) +
ylab("Total de óbitos\n(escala linear)")
brasil_obito +
scale_y_continuous(trans = 'log10') +
ylab("Total de óbitos\n(escala log)")
jpeg(paste(path, "covid-19_obitos_brasil.jpg", sep = ""),
width = 4, height = 4, units = 'in', res = 300)
brasil_obito +
scale_y_continuous(breaks = seq(0,max(brasil1$Death), 50)) +
ylab("Total de óbitos\n(escala linear)") +
dev.off()
#brasil1$pais = rep("Brasil", 70)
library(ggplot2)
p <- ggplot(brasil1, aes(x = date3, y = Death, group = pais)) +
geom_line(aes(color = pais), size = 1) +
scale_color_manual(values = c("#000000")) +
geom_point(aes(color = pais), size = 1.5) +
theme_light() +
theme(axis.text.x = element_text(angle = 90)) #+
#scale_y_continuous(breaks = seq(0, 1200, 100))
brasil_obito <- p + scale_x_date(date_breaks = "1 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-08", today()))) +
xlab("") +
theme(legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Óbitos COVID-19 no Brasil",
caption = paste("IRRD/PE. Fonte: CIEVS/NUVRESP/SEVS/SES.
\n Dados atualizados em ", format(today(), "%d/%m/%Y.")))
brasil_obito
jpeg(paste(path, "covid-19_obitos_brasil.jpg", sep = ""),
width = 4, height = 4, units = 'in', res = 300)
brasil_obito +
scale_y_continuous(breaks = seq(0,max(brasil1$Death), 50)) +
ylab("Total de óbitos\n(escala linear)") +
dev.off()
jpeg(paste(path, "covid-19_obitos_brasil.jpg", sep = ""),
width = 4, height = 4, units = 'in', res = 300)
brasil_obito +
scale_y_continuous(breaks = seq(0,max(brasil1$Death), 50)) +
ylab("Total de óbitos\n(escala linear)")
dev.off()
jpeg(paste(path, "covid-19_obitos_brasil_log.jpg", sep = ""),
width = 4, height = 4, units = 'in', res = 300)
brasil_obito +
scale_y_continuous(trans = 'log10') +
ylab("Total de óbitos\n(escala log)")
dev.off()
paises <- c("China", "Italy", "Iran", "Spain", "Germany", "US", "France", "Brazil")
countries <- filter(mergedCases, Country %in%  paises)
# Começando em 100 casos
countries2 <- filter(countries, Confirmed >=100)
# Reorganizando as datas
countries2 = countries2 %>%
mutate(date2 = as.POSIXct(as.character(Date), format = "%m/%d/%y"),
date3 = as.Date(date2))
# Criando uma variável de tempo em dias a partir do 100º caso
lista_paises <- list(NULL)
for(i in 1:length(paises)){
df <- filter(countries2, Country == paises[i])
t0 <- (sort(df$date3))[1]
df <- mutate(df, Time = as.numeric(date3 - t0))
lista_paises[[i]] <- df
}
names(lista_paises) <- paises
# Juntando numa única base de dados
paises100casos <- do.call(rbind, lista_paises)
# Colocando o nome dos países em ordem
class(paises100casos$Country)
paises100casos$Country2 = factor(paises100casos$Country,
levels = paises)
# Colocando o nome dos países em português
paises100casos <- paises100casos %>%
mutate(Country3 = if_else(Country == "Italy", "Itália",
if_else(Country == "Iran", "Irã",
if_else(Country == "Spain", "Espanha",
if_else(Country == "Germany",
"Alemanha",
if_else(Country == "Brazil", "Brasil", if_else(Country == "US", "Estados Unidos", if_else(Country == "France",
"França", as.character(Country)))))))))
paises2 <- c("China", "Itália", "Irã", "Espanha", "Alemanha", "Brasil", "Estados Unidos")
paises100casos$Country3 = factor(paises100casos$Country3,
levels = paises2)
names(paises100casos)[9] <- "Países"
library(ggplot2)
p <- ggplot(paises100casos, aes(x = Time, y = Confirmed, group = Country3)) +
geom_line(aes(color = Country3)) +
geom_point(aes(color = Country3)) +
xlab("Número de dias a partir do 100º caso") +
scale_x_continuous(breaks = seq(0,70,by=10)) +
ylab("Total de casos confirmados") +
labs(title = "COVID-19: Número acumulado de casos",
caption = "IRRD/PE. \n Fonte: OMS/CDC/Worldmeters/\nJohn Hopkins University(Sistema). Dados atualizados em 31/03/2020.") +
theme(legend.title = element_blank())
p + theme_minimal()
paises <- c("China", "Italy", "Iran", "Spain", "Germany", "US", "France", "Brazil")
countries <- filter(mergedCases, Country %in%  paises)
# Começando em 100 casos
countries2 <- filter(countries, Confirmed >=100)
# Reorganizando as datas
countries2 = countries2 %>%
mutate(date2 = as.POSIXct(as.character(Date), format = "%m/%d/%y"),
date3 = as.Date(date2))
# Criando uma variável de tempo em dias a partir do 100º caso
lista_paises <- list(NULL)
for(i in 1:length(paises)){
df <- filter(countries2, Country == paises[i])
t0 <- (sort(df$date3))[1]
df <- mutate(df, Time = as.numeric(date3 - t0))
lista_paises[[i]] <- df
}
names(lista_paises) <- paises
# Juntando numa única base de dados
paises100casos <- do.call(rbind, lista_paises)
# Colocando o nome dos países em ordem
class(paises100casos$Country)
paises100casos$Country2 = factor(paises100casos$Country,
levels = paises)
# Colocando o nome dos países em português
paises100casos <- paises100casos %>%
mutate(Country3 = if_else(Country2 == "Italy", "Itália",
if_else(Country2 == "Iran", "Irã",
if_else(Country2 == "Spain", "Espanha",
if_else(Country2 == "Germany",
"Alemanha",
if_else(Country2 == "Brazil", "Brasil", if_else(Country2 == "US", "Estados Unidos", if_else(Country2 == "France",
"França", as.character(Country2)))))))))
paises2 <- c("China", "Itália", "Irã", "Espanha", "Alemanha", "Brasil", "Estados Unidos")
paises100casos$Country3 = factor(paises100casos$Country3,
levels = paises2)
names(paises100casos)[9] <- "Países"
library(ggplot2)
p <- ggplot(paises100casos, aes(x = Time, y = Confirmed, group = Country3)) +
geom_line(aes(color = Country3)) +
geom_point(aes(color = Country3)) +
xlab("Número de dias a partir do 100º caso") +
scale_x_continuous(breaks = seq(0,70,by=10)) +
ylab("Total de casos confirmados") +
labs(title = "COVID-19: Número acumulado de casos",
caption = "IRRD/PE. \n Fonte: OMS/CDC/Worldmeters/\nJohn Hopkins University(Sistema). Dados atualizados em 31/03/2020.") +
theme(legend.title = element_blank())
p + theme_minimal()
View(paises100casos)
View(paises100casos)
View(paises100casos)
paises <- c("China", "Italy", "Iran", "Spain", "Germany", "US", "France", "Brazil")
countries <- filter(mergedCases, Country %in%  paises)
# Começando em 100 casos
countries2 <- filter(countries, Confirmed >=100)
# Reorganizando as datas
countries2 = countries2 %>%
mutate(date2 = as.POSIXct(as.character(Date), format = "%m/%d/%y"),
date3 = as.Date(date2))
# Criando uma variável de tempo em dias a partir do 100º caso
lista_paises <- list(NULL)
for(i in 1:length(paises)){
df <- filter(countries2, Country == paises[i])
t0 <- (sort(df$date3))[1]
df <- mutate(df, Time = as.numeric(date3 - t0))
lista_paises[[i]] <- df
}
names(lista_paises) <- paises
# Juntando numa única base de dados
paises100casos <- do.call(rbind, lista_paises)
# Colocando o nome dos países em ordem
class(paises100casos$Country)
paises100casos$Country2 = factor(paises100casos$Country,
levels = paises)
# Colocando o nome dos países em português
paises100casos <- paises100casos %>%
mutate(Países = if_else(Country == "Italy", "Itália",
if_else(Country == "Iran", "Irã",
if_else(Country == "Spain", "Espanha",
if_else(Country == "Germany",
"Alemanha",
if_else(Country == "Brazil", "Brasil", if_else(Country == "US", "Estados Unidos", if_else(Country == "France", "França", as.character(Country)))))))))
paises2 <- c("China", "Itália", "Irã", "Espanha", "Alemanha", "Brasil", "Estados Unidos")
paises100casos$Country3 = factor(paises100casos$Country3,
levels = paises2)
View(paises100casos)
paises <- c("China", "Italy", "Iran", "Spain", "Germany", "US", "France", "Brazil")
countries <- filter(mergedCases, Country %in%  paises)
# Começando em 100 casos
countries2 <- filter(countries, Confirmed >=100)
# Reorganizando as datas
countries2 = countries2 %>%
mutate(date2 = as.POSIXct(as.character(Date), format = "%m/%d/%y"),
date3 = as.Date(date2))
# Criando uma variável de tempo em dias a partir do 100º caso
lista_paises <- list(NULL)
for(i in 1:length(paises)){
df <- filter(countries2, Country == paises[i])
t0 <- (sort(df$date3))[1]
df <- mutate(df, Time = as.numeric(date3 - t0))
lista_paises[[i]] <- df
}
names(lista_paises) <- paises
# Juntando numa única base de dados
paises100casos <- do.call(rbind, lista_paises)
# Colocando o nome dos países em ordem
class(paises100casos$Country)
paises100casos$Country2 = factor(paises100casos$Country,
levels = paises)
# Colocando o nome dos países em português
paises100casos <- paises100casos %>%
mutate(Países = if_else(Country == "Italy", "Itália",
if_else(Country == "Iran", "Irã",
if_else(Country == "Spain", "Espanha",
if_else(Country == "Germany",
"Alemanha",
if_else(Country == "Brazil", "Brasil", if_else(Country == "US", "Estados Unidos", if_else(Country == "France", "França", as.character(Country)))))))))
library(ggplot2)
p <- ggplot(paises100casos, aes(x = Time, y = Confirmed, group = Países)) +
geom_line(aes(color = Países)) +
geom_point(aes(color = Países)) +
xlab("Número de dias a partir do 100º caso") +
scale_x_continuous(breaks = seq(0,70,by=10)) +
ylab("Total de casos confirmados") +
labs(title = "COVID-19: Número acumulado de casos",
caption = "IRRD/PE. \n Fonte: OMS/CDC/Worldmeters/\nJohn Hopkins University(Sistema). Dados atualizados em 31/03/2020.") +
theme(legend.title = element_blank())
p + theme_minimal()
p + theme_minimal() + theme(legend.position = "bottom")
paises <- c("China", "Italy", "Iran", "Spain", "Germany", "US", "France", "Brazil")
countries <- filter(mergedCases, Country %in%  paises)
# Começando em 100 casos
countries2 <- filter(countries, Confirmed >=100)
# Reorganizando as datas
countries2 = countries2 %>%
mutate(date2 = as.POSIXct(as.character(Date), format = "%m/%d/%y"),
date3 = as.Date(date2))
# Criando uma variável de tempo em dias a partir do 100º caso
lista_paises <- list(NULL)
for(i in 1:length(paises)){
df <- filter(countries2, Country == paises[i])
t0 <- (sort(df$date3))[1]
df <- mutate(df, Time = as.numeric(date3 - t0))
lista_paises[[i]] <- df
}
names(lista_paises) <- paises
# Juntando numa única base de dados
paises100casos <- do.call(rbind, lista_paises)
# Colocando o nome dos países em ordem
class(paises100casos$Country)
paises100casos$Country2 = factor(paises100casos$Country,
levels = paises)
# Colocando o nome dos países em português
paises100casos <- paises100casos %>%
mutate(Países = if_else(Country == "Italy", "Itália",
if_else(Country == "Iran", "Irã",
if_else(Country == "Spain", "Espanha",
if_else(Country == "Germany",
"Alemanha",
if_else(Country == "Brazil", "Brasil", if_else(Country == "US", "Estados Unidos", if_else(Country == "France", "França", as.character(Country)))))))))
library(ggplot2)
p <- ggplot(paises100casos, aes(x = Time, y = Confirmed, group = Países)) +
geom_line(aes(color = Países)) +
geom_point(aes(color = Países)) +
xlab("Número de dias a partir do 100º caso") +
scale_x_continuous(breaks = seq(0,70,by=10)) +
ylab("Total de casos confirmados") +
labs(title = "COVID-19: Número acumulado de casos",
caption = "IRRD/PE. \n Fonte: OMS/CDC/Worldmeters/\nJohn Hopkins University(Sistema). Dados atualizados em 31/03/2020.") +
theme(legend.title = element_blank())
p + theme_minimal()
jpeg(paste(path, "comparacao_brasil_paises.jpg"),
width = 6, height = 4, units = 'in', res = 300)
p + theme_minimal()
dev.off()
p + theme_minimal() +
scale_y_log10()
jpeg("comparacao_brasil_paises_escala_log_31032020.jpg",
width = 6, height = 5, units = 'in', res = 300)
p + theme_minimal() +
scale_y_log10()
dev.off()
jpeg(paste(path,"comparacao_brasil_paises_escala_log_31032020.jpg"),
width = 6, height = 5, units = 'in', res = 300)
p + theme_minimal() +
scale_y_log10()
dev.off()
paises <- c("China", "Italy", "Iran", "Spain", "Germany", "US", "France", "Brazil")
countries <- filter(mergedCases, Country %in%  paises)
# Começando em 100 casos
countries2 <- filter(countries, Confirmed >=100)
# Reorganizando as datas
countries2 = countries2 %>%
mutate(date2 = as.POSIXct(as.character(Date), format = "%m/%d/%y"),
date3 = as.Date(date2))
# Criando uma variável de tempo em dias a partir do 100º caso
lista_paises <- list(NULL)
for(i in 1:length(paises)){
df <- filter(countries2, Country == paises[i])
t0 <- (sort(df$date3))[1]
df <- mutate(df, Time = as.numeric(date3 - t0))
lista_paises[[i]] <- df
}
names(lista_paises) <- paises
# Juntando numa única base de dados
paises100casos <- do.call(rbind, lista_paises)
# Colocando o nome dos países em ordem
class(paises100casos$Country)
paises100casos$Country2 = factor(paises100casos$Country,
levels = paises)
# Colocando o nome dos países em português
paises100casos <- paises100casos %>%
mutate(Países = if_else(Country == "Italy", "Itália",
if_else(Country == "Iran", "Irã",
if_else(Country == "Spain", "Espanha",
if_else(Country == "Germany",
"Alemanha",
if_else(Country == "Brazil", "Brasil", if_else(Country == "US", "Estados Unidos", if_else(Country == "France", "França", as.character(Country)))))))))
library(ggplot2)
p <- ggplot(paises100casos, aes(x = Time, y = Confirmed, group = Países)) +
geom_line(aes(color = Países)) +
geom_point(aes(color = Países)) +
xlab("Número de dias a partir do 100º caso") +
scale_x_continuous(breaks = seq(0,70,by=10)) +
labs(title = "COVID-19: Número acumulado de casos",
caption = "IRRD/PE. \n Fonte: OMS/CDC/Worldmeters/\nJohn Hopkins University(Sistema). Dados atualizados em 31/03/2020.") +
theme(legend.title = element_blank())
p + theme_minimal()
jpeg(paste(path, "comparacao_brasil_paises.jpg"),
width = 6, height = 4, units = 'in', res = 300)
p + theme_minimal() +
ylab("Total de casos confirmados\n(escala linear)")
dev.off()
jpeg(paste(path,"comparacao_brasil_paises_escala_log_31032020.jpg"),
width = 6, height = 5, units = 'in', res = 300)
p + theme_minimal() +
scale_y_log10()
dev.off() + ylab("Total de casos confirmados\n(escala log)")
jpeg(paste(path,"comparacao_brasil_paises_escala_log_31032020.jpg"),
width = 6, height = 5, units = 'in', res = 300)
p + theme_minimal() +
scale_y_log10()  + ylab("Total de casos confirmados\n(escala log)")
dev.off()
jpeg(paste(path, "comparacao_brasil_paises.jpg"),
width = 6, height = 5, units = 'in', res = 300)
p + theme_minimal() +
ylab("Total de casos confirmados\n(escala linear)")
dev.off()
setwd("~/Documents/GitHub/covid-19_Pernambuco/curvatura_ricci")
library(flexdashboard)
# Bibliotecas
library(reticulate) #para rodar códigos em Python
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(plotly)
#library(coronavirus)
#data(coronavirus)
# Local da versão do Python a ser utilizada
use_python('/opt/anaconda3/bin/python', required = TRUE)
#py_install("orca")
# Rodando
# Importante: mudar o diretório para onde se encontra o arquivo!
py_run_file("Ricci.py")
# Transformando datas
library(dplyr)
library(readr)
forman_ricci_brasil <- read_csv("forman_ricci_brasil.csv")
forman_ricci_brasil$periodo = as.Date.character(forman_ricci_brasil$periodo, format = "%d %b")
class(forman_ricci_brasil$periodo)
write.csv(forman_ricci_brasil, "forman_ricci_brasil2.csv")
forman_ricci_mundial <- read_csv("forman_ricci_mundial.csv")
forman_ricci_mundial$periodo = as.Date.character(forman_ricci_mundial$periodo, format = "%d %b")
class(forman_ricci_mundial$periodo)
write.csv(forman_ricci_mundial, "forman_ricci_mundial2.csv")
setwd("~/Documents/GitHub/covid-19_Pernambuco/predicoes")
library(flexdashboard)
# Bibliotecas
library(reticulate) #para rodar códigos em Python
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(plotly)
#library(coronavirus)
#data(coronavirus)
# Local da versão do Python a ser utilizada
use_python('/opt/anaconda3/bin/python', required = TRUE)
#py_install("orca")
# Rodando
# Importante: mudar o diretório para onde se encontra o arquivo!
py_run_file("Fitting_curvature_.py")
setwd("~/Documents/GitHub/covid-19_Pernambuco/predicoes")
Casos_confirmados_Brazil_Fitting <- read_csv("Casos_confirmados_Brazil_Fitting.csv")
Casos_confirmados_Brazil_Fitting$Data = as.Date.character(Casos_confirmados_Brazil_Fitting$Data, format = "%d %b")
class(Casos_confirmados_Brazil_Fitting$Data)
write.csv(Casos_confirmados_Brazil_Fitting, "Casos_confirmados_Brazil_Fitting.csv")
# Mundial
Casos_confirmados_Pernambuco_Fitting <- read_csv("Casos_confirmados_Pernambuco_Fitting.csv")
Casos_confirmados_Pernambuco_Fitting$Data = as.Date.character(Casos_confirmados_Pernambuco_Fitting$Data, format = "%d %b")
class(Casos_confirmados_Pernambuco_Fitting$Data)
write.csv(Casos_confirmados_Pernambuco_Fitting, "Casos_confirmados_Pernambuco_Fitting.csv")
